[comment encoding = UTF-8 /]
[module readme('http://www.eclipse.org/uml2/5.0.0/UML')]
[import utils /]

[template public genReadMe(m : Model)]
[file ('README.md', false, 'UTF-8')]
#**API Rest**
##**Introducción**
La comunicación entre cliente y servidor se realiza intercambiando objetos JSON. Para cada entidad se hace un mapeo a JSON, donde cada uno de sus atributos se transforma en una propiedad de un objeto JSON. Todos los servicios se generan en la URL /[m.getProjectName('/webresources')/]/. Por defecto, todas las entidades tienen un atributo `id`, con el cual se identifica cada registro:

```javascript
{
    id: '',
    attribute_1: '',
    attribute_2: '',
    ...
    attribute_n: ''
}
```

###**CRUD Básico**
Para los servicios de CRUD Básico, Cuando se transmite información sobre un registro específico, se realiza enviando un objeto con la estructura mencionada en la sección anterior.
La única excepción se presenta al solicitar al servidor una lista de los registros en la base de datos, que incluye información adicional para manejar paginación de lado del servidor.

La respuesta del servidor al solicitar una colección presenta el siguiente formato:

```javascript
{
    totalRecords: 0, //cantidad de registros en la base de datos
    records: ['[]'/] //collección con los datos solicitados. cada objeto tiene la estructura de la entidad.
}
```

###**Maestro Detalle**
El API REST para los componentes Maestro/Detalle tiene un funcionamiento distinto al API de CRUD Básico, dado que está diseñado para poder guardar toda la información de una entidad y sus detalles en una transacción. La estructura de los datos intercambiados entre el cliente y el servidor cumple con las siguientes reglas:

1. El objeto JSON tiene un atributo correspondiente a la entidad padre. La estructura interna de este objeto corresponde a la misma usada en el CRUD básico de la entidad.
2. Por cada entidad detalle, se crea cuatro colecciones JSON correspondientes a las acciones a realizar con los datos:
    + Una colección con los datos a listar en el cliente. Su nombre sigue el formato *list`nombreEntidad`*
    + Una colección con los datos a crear en el servidor. Su nombre sigue el formato *create`nombreEntidad`*
    + Una colección con los datos a actualizar en el servidor. Su nombre sigue el formato *update`nombreEntidad`*
    + Una colección con los datos a eliminar en el servidor. Su nombre sigue el formato *delete`nombreEntidad`*
3. La estructura de los objetos dentro de las colecciones corresponde con la estructura básica de la entidad correspondiente.

Ejemplo de una entidad :

```javascript
{
    //objeto para entidad maestra llamada master
    masterEntity: {},
    //4 listas para entidad detalle detail_1
    listdetail_1: ['[]'/],
    createdetail_1: ['[]'/],
    updatedetail_1: ['[]'/],
    deletedetail_1: ['[]'/],
    //4 colecciones para entidad detalle detail_2
    listdetail_2: ['[]'/],
    createdetail_2: ['[]'/],
    updatedetail_2: ['[]'/],
    deletedetail_2: ['[]'/],
    ...
    //4 colecciones para entidad detalle detail_n
    listdetail_n: ['[]'/],
    createdetail_n: ['[]'/],
    updatedetail_n: ['[]'/],
    deletedetail_n: ['[]'/],
}
```
##***API de la aplicación [m.name/]***
[for(class : Class | m.getClasses()) ]
###**Entidad [ class.name /]**
####**CRUD Básico**
En la siguiente tabla se detalla los servicios REST generados para la entidad [ class.name /], la estructura del objeto que intercambian y sus respectivas funciones.

#####**Estructura de objeto [ class.name /]**
```javascript
{
    [for(attr : Property | class.getAllAttributes()) separator(',')]
    [ attr.name /]: '' /*Tipo [ attr.type.name /]*/
    [/for]
}
```
#####**Servicios**
Método|URI|Acción|Parámetros|Retorno
:--:|:--:|:--:|:--:|:--:
**GET**|/[ class.name.toLowerFirst() /]s|Obtener todos los objetos de [ class.name /] (RETRIEVE)|**@QueryParam page**: página a consultar<br>**@QueryParam maxRecords**: cantidad de registros a consultar<br><br>*Si se omite alguno de estos parámetros se obtiene todos los registros en la base de datos*|Colección JSON con instancias de [ class.name /]
**GET**|/[ class.name.toLowerFirst() /]s/:id|Obtener los atributos de una instancia de [ class.name /] (RETRIEVE)|**@PathParam id**: Identificador del registro|Objeto JSON con detalle de la instancia de [ class.name /]
**POST**|/[ class.name.toLowerFirst() /]s|Crear una nueva instancia de la entidad [ class.name /] (CREATE)|Objeto JSON de la entidad|Objeto JSON de [ class.name /] creado
**PUT**|/[ class.name.toLowerFirst() /]s|Actualiza una instancia de la entidad [ class.name /] (UPDATE)|Objeto JSON de [ class.name /]|Objeto JSON [ class.name /] actualizado
**DELETE**|/[ class.name.toLowerFirst() /]s/:id|Borra instancia de [ class.name /] en el servidor (DELETE)|<strong>@PathParam id</strong>: Identificador del registro| 

[/for]
[/file]
[/template]