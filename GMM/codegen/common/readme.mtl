[comment encoding = UTF-8 /]
[module readme('http://www.eclipse.org/uml2/5.0.0/UML')]
[import utils /]

[template public genReadMe(m : Model)]
[file ('README.md', false, 'UTF-8')]
#API Rest
##Introducción
La comunicación entre cliente y servidor se realiza intercambiando objetos JSON. Para cada entidad se hace un mapeo a JSON, donde cada uno de sus atributos se transforma en una propiedad de un objeto JSON. Todos los servicios se generan en la URL /[m.getProjectName('/webresources')/]/. Por defecto, todas las entidades tienen un atributo `id`, con el cual se identifica cada registro:

```javascript
{
    id: '',
    attribute_1: '',
    attribute_2: '',
    ...
    attribute_n: ''
}
```

###CRUD Básico
Para los servicios de CRUD Básico, Cuando se transmite información sobre un registro específico, se realiza enviando un objeto con la estructura mencionada en la sección anterior.
La única excepción se presenta al solicitar al servidor una lista de los registros en la base de datos, que incluye información adicional para manejar paginación de lado del servidor.

La respuesta del servidor al solicitar una colección presenta el siguiente formato:

```javascript
{
    totalRecords: 0, //cantidad de registros en la base de datos
    records: ['[]'/] //collección con los datos solicitados. cada objeto tiene la estructura de la entidad.
}
```

##API de la aplicación [m.name/]
[for(class : Class | m.getClasses()) ]
###Entidad [ class.name /]
####CRUD Básico
En la siguiente tabla se detalla los servicios REST generados para la entidad [ class.name /], la estructura del objeto que intercambian y sus respectivas funciones.

#####Estructura de objeto [ class.name /]
```javascript
{
    [for(attr : Property | class.getAllAttributes()) separator(',\n')]
    [ attr.name /]: '' /*Tipo [ attr.type.name /]*/[/for]

}
```
#####Servicios
Método|URI|Acción|Parámetros|Retorno
:--:|:--:|:--:|:--:|:--:
**GET**|/[ class.name.toLowerFirst() /]s|Obtener todos los objetos de [ class.name /] (RETRIEVE)|**@QueryParam page**: página a consultar<br>**@QueryParam maxRecords**: cantidad de registros a consultar<br><br>*Si se omite alguno de estos parámetros se obtiene todos los registros en la base de datos*|Objeto JSON con registros de [class.name/] y el total de registros en la base de datos
**GET**|/[ class.name.toLowerFirst() /]s/:id|Obtener los atributos de una instancia de [ class.name /] (RETRIEVE)|**@PathParam id**: Identificador del registro|Objeto JSON con detalle de la instancia de [ class.name /]
**POST**|/[ class.name.toLowerFirst() /]s|Crear una nueva instancia de la entidad [ class.name /] (CREATE)|Objeto JSON de la entidad|Objeto JSON de [ class.name /] creado
**PUT**|/[ class.name.toLowerFirst() /]s/:id|Actualiza una instancia de la entidad [ class.name /] (UPDATE)|Objeto JSON de [ class.name /]|Objeto JSON [ class.name /] actualizado
**DELETE**|/[ class.name.toLowerFirst() /]s/:id|Borra instancia de [ class.name /] en el servidor (DELETE)|<strong>@PathParam id</strong>: Identificador del registro| 

[if (class.isMaster())]
####Maestros Detalle de [class.name/]
#####Servicios
A diferencia del API para CRUD Básico, el API de Maestro/Detalle no provee un servicio para listar los registros de la entidad maestra. Los servicios generados para el componente Maestro/Detalle de [class.name/] son los siguientes:

Método|URI|Acción|Parámetros|Cuerpo|Retorno
:--:|:--:|:--:|:--:|:--:
[for (asc : Association | class.getAssociations())]
    [let el : Set(Property) = asc.getChildProperty(class)]
        [for (elem : Property | el)]
			[if (elem.isComposite())]
**GET**|[class.name.toLowerFirst()/]s/:id/[elem.name/]|Obtener registros de [elem.name/] hijos de [class.name/]|**@PathParam id**: Identificador del registro de [class.name/]||Arreglo de objetos [elem.name/]
**POST**|[class.name.toLowerFirst()/]s/:id/[elem.name/]|Creación de registros [elem.name/] hijos de [class.name/]|**@PathParam id**: Identificador del registro de [class.name/]|Arreglo de objetos [elem.name/] a crear|Arreglo de objetos [elem.name/] creados con sus respectivos ID
**PUT**|[class.name.toLowerFirst()/]s/:id/[elem.name/]|Actualización de registros [elem.name/] hijos de [class.name/]|**@PathParam id**: Identificador del registro de [class.name/]|Arreglo de objetos [elem.name/] a actualizar|Arreglo de objetos [elem.name/] actualizados
**DELETE**|[class.name.toLowerFirst()/]s/:id/[elem.name/]|Eliminación de registros [elem.name/] hijos de [class.name/]|**@PathParam id**: Identificador del registro de [class.name/]|Arreglo de atributo `id` de [elem.name/] a eliminar|
			[else]
**GET**|[class.name.toLowerFirst()/]s/:id/[elem.name/]|Obtener registros de [elem.name/] asociados a [class.name/]|**@PathParam id**: Identificador del registro de [class.name/]||Arreglo de objetos [elem.name/] asociados a [class.name/]
**PUT**|[class.name.toLowerFirst()/]s/:id/[elem.name/]|Actualización de referencias a [elem.name/] desde [class.name/]|**@PathParam id**: Identificador del registro de [class.name/]|Arreglo de objetos [elem.name/] a asociar|Arreglo de objetos [elem.name/] asociados
			[/if]
        [/for]
    [/let]
[/for]
[/if]
[/for]
[/file]
[/template]