[comment encoding = UTF-8 /]
[module crud('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public crudMain(m : Model, path : String)]
[let filePath : String = path.concat('crud/')]
	[m.crudModule(filePath)/]
	[m.crudService(filePath)/]
    [m.crudDirectives(filePath)/]
    [m.crudListTemplate(filePath)/]
[/let]
[/template]

[template public crudModule(m : Model, path : String)]
[file (path.concat('crud.mod.js'), false, 'UTF-8')]
(function (angular) {
    var crud = angular.module('CrudModule', ['['/]'restangular', 'ui.bootstrap'[']'/]);

    crud.config(['['/]'RestangularProvider', function (rp) {
            rp.setBaseUrl('webresources');
            rp.addResponseInterceptor(function (data, operation) {
                var extractedData;
                if (operation === "getList") {
                    extractedData = data.records;
                    extractedData.totalRecords = data.totalRecords;
                } else {
                    extractedData = data;
                }
                return extractedData;
            });
        }[']'/]);
})(window.angular);
[/file]
[/template]

[template public crudService(m : Model, path : String)]
[file (path.concat('crud.svc.js'), false, 'UTF-8')]
(function (angular) {
    var crud = angular.module('CrudModule');

    crud.factory('CRUDBase', ['['/]'Restangular', function (RestAngular) {
            function crudConstructor() {
                this.api = RestAngular.all(this.url);

                this.fetchRecords = function (currentPage, itemsPerPage) {
                    return this.api.getList(null, {page: currentPage, maxRecords: itemsPerPage});
                };
                this.saveRecord = function (currentRecord) {
                    if (currentRecord.id) {
                        return currentRecord.put();
                    } else {
                        return this.api.post(currentRecord);
                    }
                };
                this.deleteRecord = function (record) {
                    return record.remove();
                };
                this.extendCtrl = function (ctrl, scope) {
                    //Variables para el scope
                    scope.currentRecord = {};
                    scope.records = ['[]'/];

                    //Variables de paginaciï¿½n
                    scope.maxSize = 5;
                    scope.itemsPerPage = 5;
                    scope.totalItems = 0;
                    scope.currentPage = 1;

                    //Variables para el controlador
                    ctrl.editMode = false;

                    //Funciones que no requieren del servicio
                    ctrl.createRecord = function () {
                        this.editMode = true;
                        scope.currentRecord = {};
                    };
                    ctrl.editRecord = function (record) {
                        scope.currentRecord = RestAngular.copy(record);
                        this.editMode = true;
                    };

                    //Funciones que usan el servicio CRUD
                    var service = this;

                    ctrl.pageChanged = function () {
                        this.fetchRecords();
                    };

                    ctrl.fetchRecords = function () {
                        return service.fetchRecords(scope.currentPage, scope.itemsPerPage).then(function (data) {
                            scope.records = data;
                            scope.totalItems = data.totalRecords;
                            scope.currentRecord = {};
                            ctrl.editMode = false;
                            return data;
                        });
                    };
                    ctrl.saveRecord = function () {
                        return service.saveRecord(scope.currentRecord).then(function () {
                            ctrl.fetchRecords();
                        });
                    };
                    ctrl.deleteRecord = function (record) {
                        return service.deleteRecord(record).then(function () {
                            ctrl.fetchRecords();
                        });
                    };
                };
            }
            return {extendService: function (svc) {
                    crudConstructor.call(svc);
                }};
        }[']'/]);
})(window.angular);
[/file]
[/template]

[template public crudDirectives(m : Model, path : String)]
[file (path.concat('crud.dir.js'), false, 'UTF-8')]
(function (angular) {
    var crudModule = angular.module('CrudModule');

    crudModule.directive('listRecords', ['['/]function () {
            return {
                scope: {
                    records: '=*',
                    model: '=',
                    totalItems: '=',
                    currentPage: '=',
                    maxSize: '=',
                    itemsPerPage: '=',
                    editMode: '=',
                    changePage: '&',
                    editRecord: '&',
                    deleteRecord: '&'
                },
                restrict: 'E',
                templateUrl: 'src/shared/crud/list.tpl.html',
                link: function (scope, el, attr) {
                    scope.$watch(attr.currentPage, function () {
                        scope.changePage();
                    });
                }
            };
        }[']'/]);
})(window.angular);
[/file]
[/template]

[template public crudListTemplate(m : Model, path : String)]
[file (path.concat('list.tpl.html'), false, 'UTF-8')]
<div ng-hide="editMode">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th ng-repeat="column in model">{{column.displayName}}</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="record in records">
                <td ng-repeat="column in model" ng-switch="column.type">
                    <div ng-switch-when="Date">{{record['['/]column.name[']'/] | date}}</div>
                    <div ng-switch-default>{{record['['/]column.name[']'/]}}</div>
                </td>
                <td>
                    <button class="btn btn-default btn-sm" ng-click="editRecord({record: record})"><span class="glyphicon glyphicon-edit"></span> Edit</button>
                    <button class="btn btn-default btn-sm" ng-click="deleteRecord({record: record})"><span class="glyphicon glyphicon-minus"></span> Delete</button>
                </td>
            </tr>
        </tbody>
    </table>
    <pagination total-items="totalItems" ng-model="currentPage" items-per-page="itemsPerPage" max-size="maxSize" class="pagination-sm" boundary-links="true" rotate="false"></pagination>
</div>
[/file]
[/template]