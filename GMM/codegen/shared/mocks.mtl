[comment encoding = UTF-8 /]
[module mocks('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public mocksMain(m : Model, path : String)]
[let filePath : String = path.concat('mocks/')]
	[m.mocksModule(filePath)/]
	[m.mocksService(filePath)/]
[/let]
[/template]

[template public mocksModule(m : Model, path : String)]
[file (path.concat('mock.mod.js'), false, 'UTF-8')]
(function (angular) {
    var mocksModule = angular.module('MockModule', ['['/]'ngMockE2E'[']'/]);

    mocksModule.constant('MockModule.baseUrl', 'webresources');

    mocksModule.run(['['/]'$httpBackend', 'MockModule.urls', 'MockModule.mockRecords', 'MockModule.baseUrl', function ($httpBackend, urls, mockRecords, baseUrl) {
            function mockUrls(entity_url) {
                mockRecords['['/]entity_url[']'/] = ['[]'/];
                var fullUrl = baseUrl + '/' + entity_url;
                var url_regexp = new RegExp(fullUrl + '/(['['/]0-9[']'/]+)');
                $httpBackend.whenGET(fullUrl).respond(function (method, url, data, params) {
                    var responseObj = {totalRecords: mockRecords['['/]entity_url[']'/].length};
                    if (params && params.page && params.maxRecords) {
                        var start_index = (params.page - 1) * params.maxRecords;
                        var end_index = start_index + params.maxRecords;
                        responseObj.records = mockRecords['['/]entity_url[']'/].slice(start_index,end_index);
                    }else {
                        responseObj.records = mockRecords['['/]entity_url[']'/];
                    }
                    return ['['/]200, responseObj, {}[']'/];
                });
                $httpBackend.whenGET(url_regexp).respond(function (method, url) {
                    var id = parseInt(url.split('/').pop());
                    var record;
                    angular.forEach(mockRecords['['/]entity_url[']'/], function (value) {
                        if (value.id === id) {
                            record = angular.copy(value);
                        }
                    });
                    return ['['/]200, record, {}[']'/];
                });
                $httpBackend.whenPOST(fullUrl).respond(function (method, url, data) {
                    var record = angular.fromJson(data);
                    record.id = Math.floor(Math.random() * 10000);
                    mockRecords['['/]entity_url[']'/].push(record);
                    return ['['/]200, record, {}[']'/];
                });
                $httpBackend.whenPUT(url_regexp).respond(function (method, url, data) {
                    var record = angular.fromJson(data);
                    angular.forEach(mockRecords['['/]entity_url[']'/], function (value, key) {
                        if (value.id === record.id) {
                            mockRecords['['/]entity_url[']'/].splice(key, 1, record);
                        }
                    });
                    return ['['/]200, null, {}[']'/];
                });
                $httpBackend.whenDELETE(url_regexp).respond(function (method, url) {
                    var id = parseInt(url.split('/').pop());
                    angular.forEach(mockRecords['['/]entity_url[']'/], function (value, key) {
                        if (value.id === id) {
                            mockRecords['['/]entity_url[']'/].splice(key, 1);
                        }
                    });
                    return ['['/]200, null, {}[']'/];
                });
            }
            ;
            var ignore_regexp = new RegExp('^((?!' + baseUrl + ').)*$');
            $httpBackend.whenGET(ignore_regexp).passThrough();
            for (var i in urls) {
                if (urls.hasOwnProperty(i)) {
                    mockUrls(urls['['/]i[']'/]);
                }
            }
        }[']'/]);
})(window.angular);
[/file]
[/template]

[template public mocksService(m : Model, path : String)]
[file (path.concat('mock.svc.js'), false, 'UTF-8')]
(function (angular) {
    var mock = angular.module('MockModule');

    mock.value('MockModule.mockRecords', {});

    mock.provider('MockModule.urls', function () {
        var context = ['[]'/];
        this.registerUrl = function (value) {
            context.push(value);
        };
        this.$get = function () {
            return context;
        };
    });
})(window.angular);
[/file]
[/template]