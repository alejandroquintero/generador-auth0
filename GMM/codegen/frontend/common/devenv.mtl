[comment encoding = UTF-8 /]
[module devenv('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public mainEnv(m : Model, path : String)]
    [m.genPackageJson(path)/]
    [m.genBowerJson(path)/]
    [m.genGruntFile(path)/]
[/template]

[template protected genPackageJson(m : Model, path : String)]
[file (path.concat('package.json'), false, 'UTF-8')]
{
  "name": "[m.name/]",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-angular-templates": "^0.5.7",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-concat": "^0.5.1",
    "grunt-contrib-connect": "^0.9.0",
    "grunt-contrib-copy": "^0.7.0",
    "grunt-contrib-cssmin": "^0.12.0",
    "grunt-contrib-htmlmin": "^0.4.0",
    "grunt-contrib-uglify": "^0.9.1",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-filerev": "^2.1.2",
    "grunt-include-source": "*",
    "grunt-protractor-runner": "*",
    "grunt-usemin": "^3.1.1",
    "grunt-wiredep": "^2.0.0",
    "jit-grunt": "^0.9.1",
    "time-grunt": "^1.0.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "grunt test",
    "install": "node node_modules/grunt-protractor-runner/node_modules/protractor/bin/webdriver-manager update"
  }
}
[/file]
[/template]

[template protected genBowerJson(m : Model, path : String)]
[file (path.concat('bower.json'), false, 'UTF-8')]
{
    "name": "[m.name/]",
    "dependencies": {
        "ng-crud": "0.0.1",
        "angular-route": "^1.4.5",
        "angular-cookies": "^1.4.5"
    },
    "overrides": {
        "bootstrap": {
            "main": ['['/]
                "less/bootstrap.less",
                "dist/css/bootstrap.css",
                "dist/js/bootstrap.js"
            [']'/]
        }
    }
}
[/file]
[/template]

[template protected genGruntFile(m : Model, path : String)]
[file (path.concat('Gruntfile.js'), false, 'UTF-8')]
module.exports = function (grunt) {

    // Time how long tasks take. Can help when optimizing build times
    require('time-grunt')(grunt);

    // Automatically load required Grunt tasks
    require('jit-grunt')(grunt, {
        useminPrepare: 'grunt-usemin',
        ngtemplates: 'grunt-angular-templates',
        protractor: 'grunt-protractor-runner'
    });

    var appConfig = {
        src: 'src',
        tmp: '.tmp',
        dist: 'dist',
        includeJsFiles: ['['/]
            'src/app.js',
            'src/**/*.mod.js',
            'src/**/*.js'
        [']'/],
        includeCssFiles: ['['/]
            'src/**/*.css'
        [']'/]};

    // Project configuration.
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        meta: appConfig,
        // Empties folders to start fresh
        clean: {
            dist: {
                files: ['['/]{
                        dot: true,
                        src: ['['/]
                            '.tmp',
                            '<%= meta.dist %>/{,*/}*',
                            '!<%= meta.dist %>/.git{,*/}*'
                        [']'/]
                    }[']'/]
            },
            server: '.tmp'
        },
        // Copies remaining files to places other tasks can use
        copy: {
            dist: {
                files: ['['/]{
                        expand: true,
                        dot: true,
                        cwd: '<%= meta.src %>',
                        dest: '<%= meta.dist %>',
                        src: ['['/]
                            '*.{ico,png,txt}',
                            '.htaccess',
                            '*.html',
                            'images/{,*/}*.{webp}',
                            'styles/fonts/{,*/}*.*'
                        [']'/]
                    }, {
                        expand: true,
                        cwd: '.tmp/images',
                        dest: '<%= meta.dist %>/images',
                        src: ['['/]'generated/*'[']'/]
                    }, {
                        expand: true,
                        cwd: 'bower_components/bootstrap/dist',
                        src: 'fonts/*',
                        dest: '<%= meta.dist %>'
                    }[']'/]
            },
            styles: {
                expand: true,
                cwd: '<%= meta.src %>/styles',
                dest: '<%= meta.tmp %>/styles/',
                src: '{,*/}*.css'
            }
        },
        ngtemplates: {
            dist: {
                src: 'src/**/*.tpl.html',
                dest: '<%= meta.tmp %>/templateCache.js',
                cwd: '<%= meta.src %>',
                options: {
                    htmlmin: {
                        collapseBooleanAttributes: true,
                        collapseWhitespace: true,
                        removeComments: true
                    },
                    module: 'mainApp',
                    usemin: 'scripts/scripts.js'
                }
            }
        },
        wiredep: {
            dist: {
                src: ['['/]
                    '<%= meta.src %>/**/*.html' // .html support...
                [']'/]
            }
        },
        includeSource: {
            options: {
                basePath: '<%= meta.src %>'
            },
            dist: {
                files: {
                    '<%= meta.src %>/index.html': '<%= meta.src %>/index.html'
                }
            }
        },
        // Reads HTML for usemin blocks to enable smart builds that automatically
        // concat, minify and revision files. Creates configurations in memory so
        // additional tasks can operate on them
        useminPrepare: {
            html: '<%= meta.src %>/index.html',
            options: {
                dest: '<%= meta.dist %>',
                flow: {
                    html: {
                        steps: {
                            js: ['['/]'concat', 'uglifyjs'[']'/],
                            css: ['['/]'cssmin'[']'/]
                        },
                        post: {}
                    }
                }
            }
        },
        // Performs rewrites based on filerev and the useminPrepare configuration
        usemin: {
            html: ['['/]'<%= meta.dist %>/{,*/}*.html'[']'/],
            options: {
                assetsDirs: ['['/]
                    '<%= meta.dist %>',
                    '<%= meta.dist %>/images',
                    '<%= meta.dist %>/styles'
                [']'/],
                patterns: {
                    js: ['['/]['['/]/(images\/['['/]^''""[']'/]*\.(png|jpg|jpeg|gif|webp|svg))/g, 'Replacing references to images'[']'/][']'/]
                }
            }
        },
        // Watches files for changes and runs tasks based on the changed files
        watch: {
            bower: {
                files: ['['/]'bower.json'[']'/],
                tasks: ['['/]'wiredep'[']'/]
            },
            js: {
                files: ['['/]'<%= meta.src %>/scripts/{,*/}*.js'[']'/],
                tasks: ['['/]'newer:jshint:all'[']'/],
                options: {
                    livereload: '<%= connect.options.livereload %>'
                }
            },
            jsTest: {
                files: ['['/]'test/spec/{,*/}*.js'[']'/],
                tasks: ['['/]'newer:jshint:test', 'karma'[']'/]
            },
            styles: {
                files: ['['/]'<%= meta.src %>/styles/{,*/}*.css'[']'/],
                tasks: ['['/]'newer:copy:styles', 'autoprefixer'[']'/]
            },
            gruntfile: {
                files: ['['/]'Gruntfile.js'[']'/]
            },
            livereload: {
                options: {
                    livereload: '<%= connect.options.livereload %>'
                },
                files: ['['/]
                    '<%= meta.src %>/{,*/}*.html',
                    '.tmp/styles/{,*/}*.css',
                    '<%= meta.src %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'
                [']'/]
            }
        },
        connect: {
            options: {
                port: 9000,
                // Change this to '0.0.0.0' to access the server from outside.
                hostname: 'localhost',
                livereload: 35729
            },
            livereload: {
                options: {
                    open: true,
                    middleware: function (connect) {
                        return ['['/]
                            connect.static(appConfig.tmp),
                            connect().use(
                                    '/bower_components',
                                    connect.static('./bower_components')
                                    ),
                            connect().use(
                                    '/<%= meta.tmp %>src/styles',
                                    connect.static('./<%= meta.src %>/styles')
                                    ),
                            connect.static(appConfig.src)
                        [']'/];
                    }
                }
            },
            test: {
                options: {
                    port: 9001,
                    middleware: function (connect) {
                        return ['['/]
                            connect.static(appConfig.tmp),
                            connect.static('test'),
                            connect().use(
                                    '/bower_components',
                                    connect.static('./bower_components')
                                    ),
                            connect.static(appConfig.src)
                        [']'/];
                    }
                }
            },
            dist: {
                options: {
                    open: true,
                    base: '<%= meta.dist %>'
                }
            }
        },
        // Renames files for browser caching purposes
        filerev: {
            dist: {
                src: ['['/]
                    '<%= meta.dist %>/scripts/{,*/}*.js',
                    '<%= meta.dist %>/styles/{,*/}*.css',
                    '<%= meta.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}',
                    '<%= meta.dist %>/styles/fonts/*'
                [']'/]
            }
        },
        htmlmin: {
            dist: {
                options: {
                    collapseWhitespace: true,
                    conservativeCollapse: true,
                    collapseBooleanAttributes: true,
                    removeCommentsFromCDATA: true
                },
                files: ['['/]{
                        expand: true,
                        cwd: '<%= meta.dist %>',
                        src: ['['/]'*.html'[']'/],
                        dest: '<%= meta.dist %>'
                    }[']'/]
            }
        },
        protractor: {
            options: {
                configFile: "node_modules/protractor/example/conf.js", // Default config file 
                keepAlive: true, // If false, the grunt process stops when the test fails. 
                noColor: false, // If true, protractor will not use colors in its output. 
                args: {
                    // Arguments passed to the command 
                }
            },
            test: {// Grunt requires at least one target to run so you can simply put 'all: {}' here too. 
                options: {
                    configFile: "test/e2e.conf.js", // Target-specific config file 
                    args: {} // Target-specific arguments 
                }
            }
        }
    });

    grunt.registerTask('run', 'Compile then start a connect web server', function (target) {
        if (target === 'dist') {
            return grunt.task.run(['['/]'build', 'connect:dist:keepalive'[']'/]);
        }

        grunt.task.run(['['/]
            'clean:server',
            'wiredep',
            'includeSource',
            'copy:styles',
            'connect:livereload',
            'watch'
        [']'/]);
    });

    grunt.registerTask('build', ['['/]
        'clean',
        'wiredep',
        'includeSource',
        'useminPrepare',
        'ngtemplates',
        'concat',
        'copy',
        'cssmin',
        'uglify',
        'filerev',
        'usemin',
        'htmlmin'
    [']'/]);

    grunt.registerTask('test', ['['/]
        'clean:server',
        'wiredep',
        'includeSource',
        'copy:styles',
        'connect:test',
        'protractor'
    [']'/]);

    grunt.registerTask('default', ['['/]'test', 'build'[']'/]);
};
[/file]
[/template]