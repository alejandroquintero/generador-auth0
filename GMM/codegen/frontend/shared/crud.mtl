[comment encoding = UTF-8 /]
[module crud('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public crudMain(m : Model, path : String)]
[let filePath : String = path.concat('crud/')]
	[m.crudModule(filePath)/]
	[m.crudService(filePath)/]
    [m.crudDirectives(filePath)/]
    [m.crudCtrl(filePath)/]
    [m.crudListTemplate(filePath)/]
    [m.crudModalTemplate(filePath)/]
    [m.crudToolbarTemplate(filePath)/]
[/let]
[/template]

[template protected crudModule(m : Model, path : String)]
[file (path.concat('crud.mod.js'), false, 'UTF-8')]
(function (ng) {
    var crud = ng.module('CrudModule', ['['/]'restangular', 'ui.bootstrap'[']'/]);

    crud.config(['['/]'RestangularProvider', function (rp) {
            rp.setBaseUrl('webresources');
            rp.addRequestInterceptor(function (data, operation) {
                if (operation === "remove") {
                    return null;
                }
                return data;
            });
            rp.addResponseInterceptor(function (data, operation, what, url, response) {
                if (operation === "getList" && response.headers("X-Total-Count")) {
                    data.totalRecords = parseInt(response.headers("X-Total-Count"));
                }
                return data;
            });
        }[']'/]);
})(window.angular);
[/file]
[/template]

[template protected crudDirectives(m : Model, path : String)]
[file (path.concat('crud.dir.js'), false, 'UTF-8')]
(function (ng) {
    var mod = ng.module('CrudModule');

    mod.directive('listRecords', ['['/]function () {
            return {
                scope: {
                    records: '=*',
                    model: '=*',
                    actions: '=*?',
                    checklist: '=?'
                },
                restrict: 'E',
                templateUrl: 'src/shared/crud/list.tpl.html',
                controller: 'listCtrl'
            };
        }[']'/]);

    mod.directive('toolbar', ['['/]function () {
            return {
                scope: {
                    actions: '=*',
                    name: '@',
                    displayName: '@'
                },
                restrict: 'E',
                templateUrl: 'src/shared/crud/toolbar.tpl.html'
            };
        }[']'/]);
})(window.angular);
[/file]
[/template]

[template protected crudService(m : Model, path : String)]
[file (path.concat('crud.svc.js'), false, 'UTF-8')]
(function (ng) {
    var mod = ng.module('CrudModule');

    mod.service('actionsService', ['['/]function () {
            this.buildGlobalActions = function (ctrl) {
                return ['['/]{
                        name: 'create',
                        displayName: 'Create',
                        icon: 'plus',
                        fn: function () {
                            ctrl.createRecord();
                        },
                        show: function () {
                            return !ctrl.readOnly && !ctrl.editMode;
                        }
                    }, {
                        name: 'refresh',
                        displayName: 'Refresh',
                        icon: 'refresh',
                        fn: function () {
                            ctrl.fetchRecords();
                        },
                        show: function () {
                            return !ctrl.editMode;
                        }
                    }, {
                        name: 'save',
                        displayName: 'Save',
                        icon: 'save',
                        fn: function () {
                            ctrl.saveRecord();
                        },
                        show: function () {
                            return !ctrl.readOnly && ctrl.editMode;
                        }
                    }, {
                        name: 'cancel',
                        displayName: 'Cancel',
                        icon: 'remove',
                        fn: function () {
                            ctrl.fetchRecords();
                        },
                        show: function () {
                            return !ctrl.readOnly && ctrl.editMode;
                        }
                    }
                [']'/];
            };
            this.buildRecordActions = function (ctrl) {
                return ['['/]{
                        name: 'edit',
                        displayName: 'Edit',
                        icon: 'edit',
                        fn: function (rc) {
                            ctrl.editRecord(rc);
                        },
                        show: function () {
                            return !ctrl.readOnly;
                        }
                    }, {
                        name: 'delete',
                        displayName: 'Delete',
                        icon: 'minus',
                        fn: function (rc) {
                            ctrl.deleteRecord(rc);
                        },
                        show: function () {
                            return !ctrl.readOnly;
                        }
                    }[']'/];
            };
        }[']'/]);

    mod.service('CRUDBase', ['['/]'Restangular', 'actionsService', function (RestAngular, actionsBuilder) {
            function extendCtrl(scope, model, svc) {
                //Variables para el scope
                scope.model = model;
                scope.currentRecord = {};
                scope.records = ['['/][']'/];

                //Variables de paginacion
                this.maxSize = 5;
                this.itemsPerPage = 5;
                this.totalItems = 0;
                this.currentPage = 1;

                this.readOnly = false;

                //Variables para el controlador
                this.editMode = false;
                this.error = {show: false, type: 'danger'};
                var self = this;
                
                this.showMessage = function(msg, type){
                    var types = ['['/]'info', 'danger', 'warning', 'success'[']'/];
                    if(types.some(function(rc){return type === rc;})){
                        this.error.show = true;
                        this.error.type = type;
                        this.error.msg = msg;
                    }
                };

                this.showError = function (msg) {
                    this.showMessage(msg, 'danger');
                };
                
                this.showSuccess = function(msg){
                    this.showMessage(msg, 'success');
                };
                
                this.showWarning = function(msg){
                    this.showMessage(msg, 'warning');
                };
                
                this.showInfo = function(msg){
                    this.showMessage(msg, 'info');
                };

                this.closeError = function () {
                    this.error.show = false;
                    this.error.msg = "";
                };

                //Funciones del controlador
                this.pageChanged = function () {
                    this.fetchRecords();
                };
                
                function responseError(response){
                    self.showError(response.data);
                }
                
                this.createRecord = function () {
                    this.editMode = true;
                    scope.currentRecord = {};
                };

                this.editRecord = function (record) {
                    return svc.fetchRecord(record).then(function (data) {
                        scope.currentRecord = data;
                        self.editMode = true;
                        return data;
                    }, responseError);
                };

                this.fetchRecords = function () {
                    return svc.fetchRecords(this.currentPage, this.itemsPerPage).then(function (data) {
                        scope.records = data;
                        self.totalItems = data.totalRecords;
                        scope.currentRecord = {};
                        self.editMode = false;
                        return data;
                    }, responseError);
                };
                this.saveRecord = function () {
                    return svc.saveRecord(scope.currentRecord).then(function () {
                        self.fetchRecords();
                    }, responseError);
                };
                this.deleteRecord = function (record) {
                    return svc.deleteRecord(record).then(function () {
                        self.fetchRecords();
                    }, responseError);
                };
                this.globalActions = actionsBuilder.buildGlobalActions(this);
                this.recordActions = actionsBuilder.buildRecordActions(this);
            }
            function extendSvc(url) {
                this.url = url;
                this.api = RestAngular.all(this.url);

                this.fetchRecords = function (currentPage, itemsPerPage) {
                    return this.api.getList({page: currentPage, maxRecords: itemsPerPage});
                };

                this.fetchRecord = function (record) {
                    return record.get();
                };
                this.saveRecord = function (currentRecord) {
                    if (currentRecord.id) {
                        return currentRecord.put();
                    } else {
                        return this.api.post(currentRecord);
                    }
                };
                this.deleteRecord = function (record) {
                    return record.remove();
                };
                this.extendController = function (ctrl, scope, model) {
                    extendCtrl.call(ctrl, scope, model, this);
                };
            }
            this.extendService = function (svc, ctx) {
                extendSvc.call(svc, ctx);
            };
        }[']'/]);

    mod.service('modalService', ['['/]'$modal', function ($modal) {
            this.createSelectionModal = function (name, items) {
                return $modal.open({
                    animation: true,
                    templateUrl: 'src/shared/crud/modal.tpl.html',
                    controller: 'modalCtrl',
                    resolve: {
                        name: function () {
                            return name;
                        },
                        items: function () {
                            return items;
                        }
                    }
                });
            };
        }[']'/]);
})(window.angular);
[/file]
[/template]

[template protected crudCtrl(m : Model, path : String)]
[file (path.concat('crud.ctrl.js'), false, 'UTF-8')]
(function (ng) {
    var mod = ng.module('CrudModule');
    
    mod.controller('listCtrl', ['['/]'$scope', function($scope){
            $scope.checkAll = function(){
                this.records.forEach(function(item){item.selected = !item.selected;});
            };
    }[']'/]);

    mod.controller('modalCtrl', ['['/]'$scope', '$modalInstance', 'items', 'name', function ($scope, $modalInstance, items, name) {
            $scope.model = ['['/]{name: 'name', displayName: 'Name', type: 'String', order: 1}[']'/]            
            $scope.name = name;
            $scope.items = items;

            function getSelectedItems() {
                return $scope.items.filter(function(item){return !!item.selected;});
            }

            $scope.ok = function () {
                $modalInstance.close(getSelectedItems());
            };

            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        }[']'/]);
})(window.angular);
[/file]
[/template]

[template protected crudListTemplate(m : Model, path : String)]
[file (path.concat('list.tpl.html'), false, 'UTF-8')]
<div>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th ng-if="checklist" id="check-all"><input type="checkbox" ng-click="checkAll()"/></th>
                <th ng-repeat="column in model">{{column.displayName}}</th>
                <th ng-if="actions">Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="record in records">
                <td ng-if="checklist" id="{{$index}}-selected"><input type="checkbox" ng-model="record.selected"/></td>
                <td ng-repeat="column in model" ng-switch="column.type" id="{{$parent.$index}}-{{column.name}}">
                    <div ng-switch-when="Computed">{{column.fn(record)}}</div>
                    <div ng-switch-when="Date">{{record['['/]column.name[']'/]| date}}</div>
                    <div ng-switch-default>{{record['['/]column.name[']'/]}}</div>
                </td>
                <td ng-if="actions">
                    <button ng-repeat="action in actions" id="{{$parent.$index}}-{{action.name}}-btn" class="btn btn-default btn-sm" ng-show="action.show()" ng-click="action.fn(record)"><span class="glyphicon glyphicon-{{action.icon}}"></span> {{action.displayName}}</button>
                </td>
            </tr>
        </tbody>
    </table>
</div>
[/file]
[/template]

[template protected crudModalTemplate(m : Model, path : String)]
[file (path.concat('modal.tpl.html'), false, 'UTF-8')]
<div class="modal-header">
    <h3 class="modal-title">{{name}}</h3>
</div>
<div class="modal-body">
    <list-records 
        model="model"
        records="items"
        checklist="true"></list-records>
</div>
<div class="modal-footer">
    <button class="btn btn-default btn-sm" ng-click="ok()"><span class="glyphicon glyphicon-ok"></span> OK</button>
    <button class="btn btn-default btn-sm" ng-click="cancel()"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
</div>
[/file]
[/template]

[template protected crudToolbarTemplate(m : Model, path : String)]
[file (path.concat('toolbar.tpl.html'), false, 'UTF-8')]
<div id="{{name}}-header">
    <nav class="navbar navbar-default" role="navigation">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#{{name}}-navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand">{{displayName}}</a>
            </div>

            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="{{name}}-navbar">
                <button ng-repeat="action in actions" id="{{action.name}}-{{name}}" class="btn btn-default navbar-btn" ng-show="action.show()" ng-click="action.fn()"><span class="glyphicon glyphicon-{{action.icon}}"></span> {{action.displayName}}</button>
            </div>
        </div>
    </nav>
</div>
[/file]
[/template]