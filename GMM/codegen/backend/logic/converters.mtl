[comment encoding = UTF-8 /]
[module converters('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainConverter(c : Class, path : String)]
[c.genConverter(path.concat('converters/'))/]
[/template]

[template protected genConverter(c : Class, path : String) {className : String = c.getConverterName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
package [c.getModel().baseGroup()/].converters;

import [c.getModel().baseGroup()/].dtos.[c.getDTOName()/];
import [c.getModel().baseGroup()/].entities.[c.getEntityName()/];
import java.util.ArrayList;
import java.util.List;
[if (c.isChild())]
import [c.getModel().baseGroup()/].entities.[c.getParentAttribute().getClass().getEntityName()/];
[/if]

/**
 * @generated
 */
public abstract class [className/] {

    /**
     * @generated
     */
    private [className/]() {
    }

    /**
     * @param entity
     * @return
     * @generated
     */
    public static [c.getDTOName()/] refEntity2DTO([c.getEntityName()/] entity) {
        if (entity != null) {
            [c.getDTOName()/] dto = new [c.getDTOName()/]();
            dto.setId(entity.getId());
            dto.setName(entity.getName());

            return dto;
        } else {
            return null;
        }
    }

    /**
     * @param dto
     * @return
     * @generated
     */
    public static [c.getEntityName()/] refDTO2Entity([c.getDTOName()/] dto) {
        if (dto != null) {
            [c.getEntityName()/] entity = new [c.getEntityName()/]();
            entity.setId(dto.getId());

            return entity;
        } else {
            return null;
        }
    }

    /**
     * @generated
     */
    private static [c.getDTOName()/] basicEntity2DTO([c.getEntityName()/] entity) {
        if (entity != null) {
            [c.getDTOName()/] dto = new [c.getDTOName()/]();
            [for (a : Property | c.allAttributes())]
            dto.[a.setter()/](entity.[a.getter()/]());
            [/for]
            [for (a : Property | c.getReferences(true))]
            dto.[a.setter()/]([a.getClass().getConverterName()/].refEntity2DTO(entity.[a.getter()/]()));
            [/for]

            return dto;
        } else {
            return null;
        }
    }

    /**
     * @generated
     */
    private static [c.getEntityName()/] basicDTO2Entity([c.getDTOName()/] dto) {
        if (dto != null) {
            [c.getEntityName()/] entity = new [c.getEntityName()/]();
            [for (a : Property | c.allAttributes())]
            entity.[a.setter()/](dto.[a.getter()/]());
            [/for]
            [for (a : Property | c.getReferences(true))]
            entity.[a.setter()/]([a.getClass().getConverterName()/].refDTO2Entity(dto.[a.getter()/]()));
            [/for]

            return entity;
        } else {
            return null;
        }
    }

    /**
     * @generated
     */
    public static [c.getDTOName()/] fullEntity2DTO([c.getEntityName()/] entity) {
        if (entity != null) {
            [c.getDTOName()/] dto = basicEntity2DTO(entity);
            [for (asc : Association | c.getMasterAssociations())]
            [let a : Property = asc.getChildProperty(c)]
            dto.[a.setter()/]([a.getClass().getConverterName()/].listEntity2DTO(entity.[a.getter()/]()));
            [/let]
            [/for]
            return dto;
        } else {
            return null;
        }
    }

    /**
     * @generated
     */
    public static [c.getEntityName()/] fullDTO2Entity([c.getDTOName()/] dto) {
        if (dto != null) {
            [c.getEntityName()/] entity = basicDTO2Entity(dto);
            [for (asc : Association | c.getMasterAssociations())]
            [let a : Property = asc.getChildProperty(c)]
            entity.[a.setter()/]([a.getClass().getConverterName()/].listDTO2Entity(dto.[a.getter()/]()));
            [/let]
            [/for]
            return entity;
        } else {
            return null;
        }
    }

    /**
     * @generated
     */

    public static List<[c.getDTOName()/]> listEntity2DTO(List<[c.getEntityName()/]> entities) {
        List<[c.getDTOName()/]> dtos = new ArrayList<[c.getDTOName()/]>();
        if (entities != null) {
            for ([c.getEntityName()/] entity : entities) {
                dtos.add(basicEntity2DTO(entity));
            }
        }
        return dtos;
    }

    /**
     * @generated
     */
    public static List<[c.getEntityName()/]> listDTO2Entity(List<[c.getDTOName()/]> dtos) {
        List<[c.getEntityName()/]> entities = new ArrayList<[c.getEntityName()/]>();
        if (dtos != null) {
            for ([c.getDTOName()/] dto : dtos) {
                entities.add(basicDTO2Entity(dto));
            }
        }
        return entities;
    }

    [if (c.isChild())]
    [let parent : Property = c.getParentAttribute()]
    /**
     * @generated
     */
    public static [c.getEntityName()/] childDTO2Entity([c.getDTOName()/] dto, [parent.getClass().getEntityName()/] parent){
        [c.getEntityName()/] entity = basicDTO2Entity(dto);
        entity.[parent.setter()/](parent);
        return entity;
    }

    /**
     * @generated
     */
    public static List<[c.getEntityName()/]> childListDTO2Entity(List<[c.getDTOName()/]> dtos, [parent.getClass().getEntityName()/] parent) {
        List<[c.getEntityName()/]> entities = new ArrayList<[c.getEntityName()/]>();
        if (dtos != null) {
            for ([c.getDTOName()/] dto : dtos) {
                entities.add(childDTO2Entity(dto, parent));
            }
        }
        return entities;
    }
    [/let]
    [/if]
}
[/file]
[/template]