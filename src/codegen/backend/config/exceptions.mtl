[comment encoding = UTF-8 /]
[module exceptions('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainExceptions(m : Model, path : String)]
[m.genExceptions(path.concat(m.basePath().concat('exceptions/')))/]
[m.genBussinesExceptionMapper(path.concat(m.basePath().concat('exceptions/')))/]
[m.genEJBExceptionMapper(path.concat(m.basePath().concat('exceptions/')))/]
[m.genWebApplicationExceptionMapper(path.concat(m.basePath().concat('exceptions/')))/]
[/template]

[template public genExceptions(m : Model, path : String)]
[file (path.concat('BusinessLogicException.java'), false, 'UTF-8')]
/*
[m.license()/]
*/
package [m.baseGroup()/].exceptions;

import javax.ejb.ApplicationException;

@ApplicationException(rollback = true)
public class BusinessLogicException extends Exception {

    public BusinessLogicException() {
        super();
    }

    public BusinessLogicException(String message) {
        super(message);
    }

    public BusinessLogicException(Throwable cause) {
        super(cause);
    }

    public BusinessLogicException(String message, Throwable cause) {
        super(message, cause);
    }

}
[/file]
[/template]
[template protected genBussinesExceptionMapper(m: Model,path: String) ]
[file (path.concat('BussinesExceptionMapper.java'), false, 'UTF-8')]
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package [m.baseGroup()/].exceptions;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

/**
 *
 * @author Asistente
 */
@Provider
public class BusinessLogicExceptionMapper implements ExceptionMapper<BusinessLogicException>{

    @Override
    public Response toResponse(BusinessLogicException exception) {
        
        return Response.status(Response.Status.PRECONDITION_FAILED)
                .entity(getInitCause(exception).getLocalizedMessage())
                .type(MediaType.TEXT_PLAIN_TYPE)
                .build(); //To change body of generated methods, choose Tools | Templates.
    }
     private Throwable getInitCause(Throwable e) {
        if (e.getCause() != null) {
            return getInitCause(e.getCause());
        } else {
            return e;
        }
    }
}

[/file]
[/template]

[template protected genEJBExceptionMapper(m:Model,path:String)]
[file (path.concat('EJBExceptionMapper.java'), false, 'UTF-8')]
package [m.baseGroup()/].exceptions;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;
import javax.ejb.EJBException;

/**
 * Exception mapper for any exception wrapped in EJBException.
 * All RuntimeExceptions raise within an EJB are wrapped in {@link EJBException}.
 * This mapper changes the response to show the error message as the body of the response
 * and returns an INTERNAL_SERVER_ERROR (500).
 * @author af.esguerra10
 */
@Provider
public class EJBExceptionMapper implements ExceptionMapper<EJBException> {

    @Override
    public Response toResponse(EJBException exception) {
        return Response.serverError()
                .entity(getInitCause(exception).getLocalizedMessage())
                .type(MediaType.TEXT_PLAIN_TYPE)
                .build();
    }

    /**
     * Recursively retrieves the root cause of an exception.
     * @param e Thrown exception
     * @return Root cause
     */
    private Throwable getInitCause(Throwable e) {
        if (e.getCause() != null) {
            return getInitCause(e.getCause());
        } else {
            return e;
        }
    }
}
[/file]
[/template]
[template protected genWebApplicationExceptionMapper(m:Model,path:String)]
[file (path.concat('WebApplicationExceptionMapper.java'), false, 'UTF-8')]
package [m.baseGroup()/].exceptions;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;
import javax.ws.rs.ext.Provider;

/**
 * Mapper for WebApplicationException to transform response when thrown.
 * This is a Jersey Provider to transform the servlet's response when a WebApplicationException is thrown.
 * Whenever this mapper is applied, response will return the exception message as the response body.
 * @author af.esguerra10
 */
@Provider
public class WebApplicationExceptionMapper implements ExceptionMapper<WebApplicationException> {

    @Override
    public Response toResponse(WebApplicationException ex) {
            
        return Response.status(ex.getResponse().getStatus())
                .entity(getInitCause(ex).getLocalizedMessage())
                .type(MediaType.TEXT_PLAIN_TYPE)
                .build();
    }

    private Throwable getInitCause(Throwable e) {
        if (e.getCause() != null) {
            return getInitCause(e.getCause());
        } else {
            return e;
        }
    }
}
[/file]
[/template]