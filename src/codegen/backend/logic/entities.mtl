[comment encoding = UTF-8 /]
[module entities('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainEntity(c : Class, path : String)]
[c.genEntity(path.concat('entities/'))/]
[/template]

[template protected genEntity(c : Class, path : String) {className : String = c.getEntityName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
package [c.getModel().baseGroup()/].entities;

import co.edu.uniandes.csw.crud.spi.entity.BaseEntity;
import java.io.Serializable;
import javax.persistence.Entity;
[if (c.hasDateAttribute())]
import java.util.Date;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
[/if]
[if (c.hasReferences(true))]
import javax.persistence.ManyToOne;
[/if]
[if (c.isMaster())]
import java.util.List;
import javax.persistence.OneToMany;
[if (c.hasCompositeAssociations())]
import javax.persistence.CascadeType;
[/if]
[/if]
import uk.co.jemos.podam.common.PodamExclude;

/**
 * @generated
 */
@Entity
public class [className/] extends BaseEntity implements Serializable {

[for (a : Property | c.allAttributes())]
    [if (a.isDate())]
    @Temporal(TemporalType.DATE)
    [/if]
	[if (a.isID() = false and a.isName() = false)]
    private [a.type.name/] [a.name.toLowerFirst()/];
	[/if]

[/for]
[for (a : Property | c.getReferences(true))]
    @PodamExclude
    @ManyToOne
    private [a.getClass().getEntityName()/] [a.name/];
[/for]
[for (asc : Association | c.getMasterAssociations())]
[let a : Property = asc.getChildProperty(c)]
    @PodamExclude
[if (a.isComposite())]    
    @OneToMany(mappedBy = "[a.getOtherEnd().name/]", cascade = CascadeType.ALL, orphanRemoval = true)
[elseif (a.getUpper()=-1 and a.getOtherEnd().getUpper()=-1)]    
    [if (a.isNavigable() and a.getOtherEnd().isNavigable())]
    	[if (a.getClass().name>a.getOtherEnd().getClass().name)]
    @ManyToMany(mappedBy = "[a.getOtherEnd().getClass().getName()/]s")
        [else]
    @ManyToMany
    	[/if]
    [else]
    @ManyToMany
    [/if]    
[else]    
    @OneToMany
[/if]
    private List<[a.getClass().getEntityName()/]> [a.name/];
[/let]
[/for]
[for (a : Property | c.allAttributes())]
    [if (a.isID() = false and a.isName() = false)]
    /**
     * @generated
     */
    public [a.type.name/] [a.getter()/](){
        return [a.name.toLowerFirst()/];
    }

    /**
     * @generated
     */
    public void [a.setter()/]([a.type.name/] [a.name.toLowerFirst()/]){
        this.[a.name.toLowerFirst()/] = [a.name.toLowerFirst()/];
    }
    [/if]

[/for]
[for (a : Property | c.getReferences(true))]
    /**
     * @generated
     */
    public [a.getClass().getEntityName()/] [a.getter()/]() {
        return [a.name/];
    }

    /**
     * @generated
     */
    public void [a.setter()/]([a.getClass().getEntityName()/] [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }

[/for]
[for (asc : Association | c.getMasterAssociations())]
[let a : Property = asc.getChildProperty(c)]
    /**
     * @generated
     */
    public List<[a.getClass().getEntityName()/]> [a.getter()/]() {
        return [a.name/];
    }

    /**
     * @generated
     */
    public void [a.setter()/](List<[a.getClass().getEntityName()/]> [a.name.toLower()/]) {
        this.[a.name/] = [a.name.toLower()/];
    }
[/let]

[/for]

    @Override
    public boolean equals(Object obj) {
        return this.getId().equals(((BookEntity)obj).getId()); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int hashCode() {
        return this.getId().hashCode(); //To change body of generated methods, choose Tools | Templates.
    }
}
[/file]
[/template]