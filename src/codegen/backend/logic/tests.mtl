[comment encoding = UTF-8 /]
[module tests('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /] 

[template public mainTests(c : Class, path : String)]
[c.genTests(path.concat('test/logic/'))/]
[/template]

[template protected genTests(c : Class, path : String) {className : String = c.getTestName();}]
[if (c.isChild()=false)]
[let bean : String = c.getName().concat('Logic')]
[file (path.concat(className+'.java'), false, 'UTF-8')]
package [c.getModel().baseGroup()/].test.logic;

import [c.getModel().baseGroup()/].ejbs.[c.getBeanName()/];
import [c.getModel().baseGroup()/].api.[c.getAPIName()/];
import [c.getModel().baseGroup()/].entities.[c.getEntityName()/];
import [c.getModel().baseGroup()/].persistence.[c.getPersistenceName()/];
[for (a : Property | c.getCollectionAttributes())]
[if (not a.isComposite())]
import [c.getModel().baseGroup()/].api.[a.getClass().getAPIName()/];
[/if]
import [c.getModel().baseGroup()/].entities.[a.getClass().getEntityName()/];
[/for]
import java.util.ArrayList;
import java.util.List;
[if (c.hasDateAttribute())]import java.util.Date;[/if]
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;
import org.junit.Assert;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;

/**
 * @generated
 */
@RunWith(Arquillian.class)
public class [className/] {
    public static final String DEPLOY = "Prueba";

    /**
     * @generated
     */
    @Deployment
    public static WebArchive createDeployment() {
        return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
                .addPackage([c.getEntityName()/].class.getPackage())
                .addPackage([c.getBeanName()/].class.getPackage())
                .addPackage([c.getAPIName()/].class.getPackage())
                .addPackage([c.getPersistenceName()/].class.getPackage())
                .addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
    }

    /**
     * @generated
     */
    @Inject
    private [c.getAPIName()/] [bean/];

    [for (a : Property | c.getNonCompositeCollectionAttributes())]
    /**
     * @generated
     */
    @Inject
    private [a.getClass().getAPIName()/] [a.getClass().getBeanLower()/];
    [/for]

    /**
     * @generated
     */
    @PersistenceContext
    private EntityManager em;

    /**
     * @generated
     */
    @Inject
    UserTransaction utx;

    /**
     * @generated
     */
    @Before
    public void configTest() {
        try {
            utx.begin();
            clearData();
            insertData();
            utx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                utx.rollback();
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }
    }

    /**
     * @generated
     */
    private void clearData() {
        em.createQuery("delete from [c.getEntityName()/]").executeUpdate();
    }

    /**
     * @generated
     */
    private List<[c.getEntityName()/]> data = new ArrayList<[c.getEntityName()/]>();

    /**
     * @generated
     */
    private void insertData() {
        for (int i = 0; i < 3; i++) {
            PodamFactory factory = new PodamFactoryImpl();
            [c.getEntityName()/] entity = factory.manufacturePojo([c.getEntityName()/].class);            

            [for (a : Property | c.getCompositeCollectionAttributes())]
            List<[a.getClass().getEntityName()/]> [a.getClass().getName()/]List = new ArrayList<>();
            for (int j = 0; j < 5; j++)
            {
                [a.getClass().getEntityName()/] [a.getClass().getName()/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
                [a.getClass().getName()/]List.add([a.getClass().getName()/]);
            }
            
            entity.set[a.getClass().name/]s([a.getClass().getName()/]List);
            [/for]            
            
            em.persist(entity);
            data.add(entity);
        }
    }

    /**
     * @generated
     */
    @Test
    public void create[c.name/]Test() {
        PodamFactory factory = new PodamFactoryImpl();
        [c.getEntityName()/] entity = factory.manufacturePojo([c.getEntityName()/].class);
        [c.getEntityName()/] result = [bean/].create[c.name/](entity);
        Assert.assertNotNull(result);
        [for (prop : Property | c.attribute)]
        [if (not prop.isDate())]
        Assert.assertEquals(result.[prop.getter()/](), entity.[prop.getter()/]());
        [/if]
        [/for]
    }

    /**
     * @generated
     */
    @Test
    public void get[c.name/]sTest() {
        List<[c.getEntityName()/]> list = [bean/].get[c.name/]s();
        Assert.assertEquals(data.size(), list.size());
        for ([c.getEntityName()/] entity : list) {
            boolean found = false;
            for ([c.getEntityName()/] storedEntity : data) {
                if (entity.getId().equals(storedEntity.getId())) {
                    found = true;
                }
            }
            Assert.assertTrue(found);
        }
    }

    /**
     * @generated
     */
    @Test
    public void get[c.name/]Test() {
        [c.getEntityName()/] entity = data.get(0);
        [c.getEntityName()/] resultEntity = [bean/].get[c.name/](entity.getId());
        Assert.assertNotNull(resultEntity);
        [for (prop : Property | c.attribute)]
        [if (not prop.isDate())]
        Assert.assertEquals(entity.[prop.getter()/](), resultEntity.[prop.getter()/]());
        [/if]
        [/for]
    }

    /**
     * @generated
     */
    @Test
    public void delete[c.name/]Test() {
        [c.getEntityName()/] entity = data.get(0);
        [bean/].delete[c.name/](entity.getId());
        [c.getEntityName()/] deleted = em.find([c.getEntityName()/].class, entity.getId());
        Assert.assertNull(deleted);
    }

    /**
     * @generated
     */
    @Test
    public void update[c.name/]Test() {
        [c.getEntityName()/] entity = data.get(0);
        PodamFactory factory = new PodamFactoryImpl();
        [c.getEntityName()/] pojoEntity = factory.manufacturePojo([c.getEntityName()/].class);

        pojoEntity.setId(entity.getId());

        [bean/].update[c.name/](pojoEntity);

        [c.getEntityName()/] resp = em.find([c.getEntityName()/].class, entity.getId());

        [for (prop : Property | c.attribute)]
        [if (not prop.isDate())]
        Assert.assertEquals(pojoEntity.[prop.getter()/](), resp.[prop.getter()/]());
        [/if]
        [/for]
    }

    [for (a : Property | c.getNonCompositeCollectionAttributes())]
    /**
     * @generated
     */
    @Test
    public void add[a.getClass().name/]Test() {
        [c.getEntityName()/] entity = data.get(0);
        PodamFactory factory = new PodamFactoryImpl();
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
        [a.getClass().getEntityLower()/] = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/]);

        [a.getClass().getEntityName()/] response = [bean/].add[a.getClass().name/]([a.getClass().getEntityLower()/].getId(), entity.getId());
        Assert.assertNotNull(em);
        [for (prop : Property | a.getClass().attribute)]
        [if (not prop.isDate())]
        Assert.assertEquals(response.[prop.getter()/](), [a.getClass().getEntityLower()/].[prop.getter()/]());
        [/if]
        [/for]
    }

    /**
     * @generated
     */
    @Test
    public void get[a.getClass().name/]Test() {
        [c.getEntityName()/] entity = data.get(0);
        PodamFactory factory = new PodamFactoryImpl();
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
        [a.getClass().getEntityLower()/]  = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/] );

        [bean/].add[a.getClass().name/]([a.getClass().getEntityLower()/].getId(), entity.getId());
        [a.getClass().getEntityName()/] get[a.getClass().name/]Response = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/].getId());
        [for (prop : Property | a.getClass().attribute)]
        [if (not prop.isDate())]
        Assert.assertEquals([a.getClass().getEntityLower()/].[prop.getter()/](), get[a.getClass().name/]Response.[prop.getter()/]());
        [/if]
        [/for]

        [bean/].update[c.name/](entity);

        [a.getClass().getEntityName()/] listResponse = entity.get[a.getClass().name/]s().get(entity.get[a.getClass().name/]s().size() - 1);
        [for (prop : Property | a.getClass().attribute)]
        [if (not prop.isDate())]
        Assert.assertEquals(listResponse.[prop.getter()/](), [a.getClass().getEntityLower()/].[prop.getter()/]());
        [/if]
        [/for]
    }

    /**
     * @generated
     */
    @Test
    public void remove[a.getClass().name/]Test() {
        [c.getEntityName()/] entity = data.get(0);
        PodamFactory factory = new PodamFactoryImpl();
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
        [a.getClass().getEntityLower()/]  = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/] );

        [bean/].add[a.getClass().name/]([a.getClass().getEntityLower()/].getId(), entity.getId());
        [a.getClass().getEntityName()/] get[a.getClass().name/]Response = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/].getId());
        [bean/].update[c.name/](entity);
        Assert.assertNotNull(get[a.getClass().name/]Response);
        [bean/].remove[a.getClass().name/]([a.getClass().getEntityLower()/].getId(), entity.getId());
        [bean/].update[c.name/](entity);
        get[a.getClass().name/]Response = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/].getId());
        Assert.assertNull(get[a.getClass().name/]Response);
    }

    /**
     * @generated
     */
    @Test
    public void replace[a.getClass().name/]sTest() {
        [c.getEntityName()/] entity = data.get(0);
        PodamFactory factory = new PodamFactoryImpl();
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/]2 = factory.manufacturePojo([a.getClass().getEntityName()/].class);
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/]3 = factory.manufacturePojo([a.getClass().getEntityName()/].class);

        [a.getClass().getEntityLower()/] = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/]);
        [a.getClass().getEntityLower()/]2 = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/]2);
        [a.getClass().getEntityLower()/]3 = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/]3);

        [bean/].add[a.getClass().name/]([a.getClass().getEntityLower()/].getId(), entity.getId());

        [a.getClass().getEntityName()/] get[a.getClass().name/]Response = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/].getId());
        [a.getClass().getEntityName()/] get[a.getClass().name/]Response2 = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/]2.getId());
        [a.getClass().getEntityName()/] get[a.getClass().name/]Response3 = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/]3.getId());
        Assert.assertNotNull(get[a.getClass().name/]Response);
        Assert.assertNull(get[a.getClass().name/]Response2);
        Assert.assertNull(get[a.getClass().name/]Response3);

        List<[a.getClass().getEntityName()/]> [a.getClass().getName()/]List = new ArrayList<[a.getClass().getEntityName()/]>() {};
        [a.getClass().getName()/]List.add([a.getClass().getEntityLower()/]2);
        [a.getClass().getName()/]List.add([a.getClass().getEntityLower()/]3);
        [bean/].replace[a.getClass().name/]s([a.getClass().getName()/]List, entity.getId());

        get[a.getClass().name/]Response = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/].getId());
        get[a.getClass().name/]Response2 = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/]2.getId());
        get[a.getClass().name/]Response3 = [bean/].get[a.getClass().name/](entity.getId(), [a.getClass().getEntityLower()/]3.getId());
        Assert.assertNull(get[a.getClass().name/]Response);
        Assert.assertNotNull(get[a.getClass().name/]Response2);
        Assert.assertNotNull(get[a.getClass().name/]Response3);
    }

    /**
     * @generated
     */
    @Test
    public void get[a.getClass().name/]sTest() {
        [c.getEntityName()/] entity = data.get(0);
        List<[a.getClass().getEntityName()/]> listado = new ArrayList<[a.getClass().getEntityName()/]>();
        entity.set[a.getClass().name/]s(listado);
        [bean/].update[c.name/](entity);

        Assert.assertEquals(entity.get[a.getClass().name/]s().size(), 0);

        PodamFactory factory = new PodamFactoryImpl();
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/]2 = factory.manufacturePojo([a.getClass().getEntityName()/].class);
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/]3 = factory.manufacturePojo([a.getClass().getEntityName()/].class);

        [a.getClass().getEntityLower()/] = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/]);
        [a.getClass().getEntityLower()/]2 = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/]2);
        [a.getClass().getEntityLower()/]3 = [a.getClass().getBeanLower()/].create[a.getClass().name/]([a.getClass().getEntityLower()/]3);

        [bean/].add[a.getClass().name/]([a.getClass().getEntityLower()/].getId(), entity.getId());
        [bean/].add[a.getClass().name/]([a.getClass().getEntityLower()/]2.getId(), entity.getId());
        [bean/].add[a.getClass().name/]([a.getClass().getEntityLower()/]3.getId(), entity.getId());

        entity = [bean/].update[c.name/](entity);
        Assert.assertEquals(entity.get[a.getClass().name/]s().size(), 3);
    }
    [/for]
}
[/file]
[/let]
[/if]
[/template]

[template private getEntityLower(c : Class)]
[c.name.toLowerFirst().concat('Entity')/]
[/template]

[template public getBeanLower(c : Class)]
[c.name.toLowerFirst().concat('Logic')/]
[/template]