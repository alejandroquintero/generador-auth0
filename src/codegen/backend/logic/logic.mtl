[comment encoding = UTF-8 /]
[module logic('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainLogic(c : Class, path : String)]
[c.genLogicInterface(path.concat('api/'))/]
[c.genLogicBean(path.concat('ejbs/'))/]
[/template]

[template protected genLogicInterface(c : Class, path : String) {className : String = c.getAPIName();}]
[file (path.concat(className + '.java'), false, 'UTF-8')]
package [c.getModel().baseGroup()/].api;

import [c.getModel().baseGroup()/].dtos.[c.getDTOName()/];
import java.util.List;

public interface [className/] {
    public int count[c.name/]s();
    public List<[c.getDTOName()/]> get[c.name/]s(Integer page, Integer maxRecords);
    public [c.getDTOName()/] get[c.name/](Long id);
    public [c.getDTOName()/] create[c.name/]([c.getDTOName()/] dto);
    public [c.getDTOName()/] update[c.name/]([c.getDTOName()/] dto);
    public void delete[c.name/](Long id);
    public List<[c.getDTOName()/]> findByName(String name);
}
[/file]
[/template]

[template protected genLogicBean(c : Class, path : String) {className : String = c.getBeanName();}]
[file (path.concat(className.concat('.java')), false, 'UTF-8')]
package [c.getModel().baseGroup()/].ejbs;

import [c.getModel().baseGroup()/].exceptions.BusinessLogicException;
import [c.getModel().baseGroup()/].api.[c.getAPIName()/];
import [c.getModel().baseGroup()/].entities.[c.getEntityName()/];
import [c.getModel().baseGroup()/].persistence.[c.getPersistenceName()/];
[for (ass : Association | c.getSharedAssociations())]
import [c.getModel().baseGroup()/].persistence.[ass.getChildProperty(c).getClass().getPersistenceName()/];
import [c.getModel().baseGroup()/].entities.[ass.getChildProperty(c).getClass().getPersistenceName()/];
[/for]
import java.util.List;
import javax.ejb.Stateless;
import javax.inject.Inject;

/**
 * @generated
 */
@Stateless
public class [className/] implements [c.getAPIName()/] {

    @Inject private [c.getPersistenceName()/] persistence;

    [for (ass : Association | c.getSharedAssociations())]
    @Inject private [ass.getChildProperty(c).getClass().getPersistenceName()/] [ass.getChildProperty(c).getClass().getName()/]Persistence;
    [/for]

    /**
     * @generated
     */
    @Override
    public List<[c.getEntityName()/]> get[c.name/]s() {
        return persistence.findAll();
    }

    /**
     * @generated
     */
    @Override
    public [c.getEntityName()/] get[c.name/](Long id) {
        return persistence.find(id);
    }

    /**
     * @generated
     */
    @Override
    public [c.getEntityName()/] create[c.name/]([c.getEntityName()/] entity) {
        persistence.create(entity);
        return entity;
    }

    /**
     * @generated
     */
    @Override
    public [c.getEntityName()/] update[c.name/]([c.getEntityName()/] entity) {
        [c.getEntityName()/] newEntity = entity;
        [c.getEntityName()/] oldEntity = persistence.find(entity.getId());
        [for (ass : Association | c.getSharedAssociations())]         
        newEntity.set[ass.getChildProperty(c).getClass().name/]s(oldEntity.get[ass.getChildProperty(c).getClass().name/]s());
        [/for]
        newEntity.setAuthors(oldEntity.getAuthors());
        return persistence.update(newEntity);
    }

    /**
     * @generated
     */
    @Override
    public void delete[c.name/](Long id) {
        persistence.delete(id);
    }

    [for (asc : Association | c.getSharedAssociations())]
    [let a : Property = asc.getChildProperty(c)]
    /**
     * @generated
     */
    @Override
    public [a.getClass().getEntityName()/] add[a.getClass().name/](Long [a.getClass().getEntityId()/], Long [c.getEntityId()/]) throws BusinessLogicException {
        [c.getEntityName()/] [c.getEntityLower()/]  = persistence.find([c.getEntityId()/]);
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/] = [a.getClass().getName()/]Persistence.find([a.getClass().getEntityId()/]);
        [c.getEntityLower()/].get[a.getClass().name/]s().add([a.getClass().getEntityLower()/]);
        return [a.getClass().getEntityLower()/];
    }

    @Override
    public void remove[a.getClass().name/](Long [a.getClass().getEntityId()/], Long [c.getEntityId()/]) {
        [c.getEntityName()/] [c.getEntityLower()/]  = persistence.find([c.getEntityId()/]);
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/] = new [a.getClass().getEntityName()/]();
        [a.getClass().getEntityLower()/].setId([a.getClass().getEntityId()/]);
        [c.getEntityLower()/].get[a.getClass().name/]s().remove([a.getClass().getEntityLower()/]);
    }
    
    @Override
    public List<[a.getClass().getEntityName()/]> replace[a.getClass().name/]s(List<[a.getClass().name/]> [a.getClass().getName()/]s, Long [c.getEntityId()/]) throws BusinessLogicException {
        [c.getEntityName()/] [c.getEntityLower()/]  = persistence.find([c.getEntityId()/]);
        List<[a.getClass().name/]> [a.getClass().getName()/]List = [a.getClass().getName()/]Persistence.findAll();
        [c.getEntityLower()/].set[a.getClass().name/]([a.getClass().getName()/]s);
        return [c.getEntityLower()/].get[a.getClass().name/]s();
    }

    @Override
    public List<[a.getClass().getEntityName()/]> get[a.getClass().name/]s(Long [c.getEntityId()/]) {
        return persistence.find([c.getEntityId()/]).get[a.getClass().name/]s();
    }

    @Override
    public [a.getClass().getEntityName()/] get[a.getClass().name/](Long [c.getEntityId()/], Long [a.getClass().getEntityId()/]) {
        List<[a.getClass().getEntityName()/]> [a.getClass().getName()/]s = persistence.find([c.getEntityId()/]).get[a.getClass().name/]s();
        [a.getClass().getEntityName()/] [a.getClass().getEntityLower()/] = new [a.getClass().getEntityName()/]();
        [a.getClass().getEntityLower()/].setId([a.getClass().getEntityId()/]);
        int index = [a.getClass().getName()/]s.indexOf([a.getClass().getEntityLower()/]);
        if (index >= 0) {
            return [a.getClass().getName()/]s.get(index);
        }
        return null;
    }
    [/let]
    [/for]
}
[/file]
[/template]