[comment encoding = UTF-8 /]
[module converters('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainConverter(c : Class, path : String)]
[c.genConverter(path.concat('converters/'))/]
[/template]

[template protected genConverter(c : Class, path : String) {className : String = c.getConverterName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
package [c.getModel().baseGroup()/].converters;

import [c.getModel().baseGroup()/].dtos.[c.getDTOName()/];
import [c.getModel().baseGroup()/].entities.[c.getEntityName()/];
import java.util.ArrayList;
import java.util.List;
[if (c.isChild())]
import [c.getModel().baseGroup()/].entities.[c.getParentAttribute().getClass().getEntityName()/];
[/if]

/**
 * @generated
 */
public abstract class [className/] {

    /**
     * Constructor privado para evitar la creación del constructor implícito de Java
     * @generated
     */
    private [className/]() {
    }

    /**
     * Realiza la conversión de [c.getEntityName()/] a [c.getDTOName()/].
     * Se invoca cuando otra entidad tiene una referencia a [c.getEntityName()/].
     * Entrega únicamente los atributos proprios de la entidad.
     *
     * @param entity instancia de [c.getEntityName()/] a convertir
     * @return instancia de [c.getDTOName()/] con los datos recibidos por parámetro
     * @generated
     */
    public static [c.getDTOName()/] refEntity2DTO([c.getEntityName()/] entity) {
        if (entity != null) {
            [c.getDTOName()/] dto = new [c.getDTOName()/]();
            [for (a : Property | c.allAttributes())]
            dto.[a.setter()/](entity.[a.getter()/]());
            [/for]

            return dto;
        } else {
            return null;
        }
    }

    /**
     * Realiza la conversión de [c.getDTOName()/] a [c.getEntityName()/] Se invoca cuando otro DTO
     * tiene una referencia a [c.getDTOName()/] Convierte únicamente el ID ya que es el
     * único atributo necesario para guardar la relación en la base de datos
     *
     * @param dto instancia de [c.getDTOName()/] a convertir
     * @return instancia de [c.getEntityName()/] con los datos recibidos por parámetro
     * @generated
     */
    public static [c.getEntityName()/] refDTO2Entity([c.getDTOName()/] dto) {
        if (dto != null) {
            [c.getEntityName()/] entity = new [c.getEntityName()/]();
            entity.setId(dto.getId());

            return entity;
        } else {
            return null;
        }
    }

    /**
     * Convierte una instancia de [c.getEntityName()/] a [c.getDTOName()/] Se invoca cuando se desea
     * consultar la entidad y sus relaciones muchos a uno o uno a uno
     *
     * @param entity instancia de [c.getEntityName()/] a convertir
     * @return Instancia de [c.getDTOName()/] con los datos recibidos por parámetro
     * @generated
     */
    private static [c.getDTOName()/] basicEntity2DTO([c.getEntityName()/] entity) {
        if (entity != null) {
            [c.getDTOName()/] dto = new [c.getDTOName()/]();
            [for (a : Property | c.allAttributes())]
            dto.[a.setter()/](entity.[a.getter()/]());
            [/for]
            [for (a : Property | c.getReferences(true))]
            dto.[a.setter()/]([a.getClass().getConverterName()/].refEntity2DTO(entity.[a.getter()/]()));
            [/for]

            return dto;
        } else {
            return null;
        }
    }

    /**
     * Convierte una instancia de [c.getDTOName()/] a [c.getEntityName()/] Se invoca cuando se
     * necesita convertir una instancia de [c.getDTOName()/] con los atributos propios de
     * la entidad y con las relaciones uno a uno o muchos a uno
     *
     * @param dto instancia de [c.getDTOName()/] a convertir
     * @return Instancia de [c.getEntityName()/] creada a partir de los datos de dto
     * @generated
     */
    private static [c.getEntityName()/] basicDTO2Entity([c.getDTOName()/] dto) {
        if (dto != null) {
            [c.getEntityName()/] entity = new [c.getEntityName()/]();
            [for (a : Property | c.allAttributes())]
            entity.[a.setter()/](dto.[a.getter()/]());
            [/for]
            [for (a : Property | c.getReferences(true))]
            entity.[a.setter()/]([a.getClass().getConverterName()/].refDTO2Entity(dto.[a.getter()/]()));
            [/for]

            return entity;
        } else {
            return null;
        }
    }

    /**
     * Convierte instancias de [c.getEntityName()/] a [c.getDTOName()/] incluyendo sus relaciones
     * Uno a muchos y Muchos a muchos
     *
     * @param entity Instancia de [c.getEntityName()/] a convertir
     * @return Instancia de [c.getDTOName()/] con los datos recibidos por parámetro
     * @generated
     */
    public static [c.getDTOName()/] fullEntity2DTO([c.getEntityName()/] entity) {
        if (entity != null) {
            [c.getDTOName()/] dto = basicEntity2DTO(entity);
            [for (a : Property | c.getCollectionAttributes())]
            dto.[a.setter()/]([a.getClass().getConverterName()/].listEntity2DTO(entity.[a.getter()/]()));
            [/for]
            return dto;
        } else {
            return null;
        }
    }

    /**
     * Convierte una instancia de [c.getDTOName()/] a [c.getEntityName()/].
     * Incluye todos los atributos de [c.getEntityName()/].
     *
     * @param dto Instancia de [c.getDTOName()/] a convertir
     * @return Instancia de [c.getEntityName()/] con los datos recibidos por parámetro
     * @generated
     */
    public static [c.getEntityName()/] fullDTO2Entity([c.getDTOName()/] dto) {
        if (dto != null) {
            [c.getEntityName()/] entity = basicDTO2Entity(dto);
            [for (a : Property | c.getCollectionAttributes())]
            [if (a.isComposite())]
            entity.[a.setter()/]([a.getClass().getConverterName()/].childListDTO2Entity(dto.[a.getter()/](), entity));
            [else]
            entity.[a.setter()/]([a.getClass().getConverterName()/].listDTO2Entity(dto.[a.getter()/]()));
            [/if]
            [/for]
            return entity;
        } else {
            return null;
        }
    }

    /**
     * Convierte una colección de instancias de [c.getEntityName()/] a [c.getDTOName()/]. Para cada
     * instancia de [c.getEntityName()/] en la lista, invoca basicEntity2DTO y añade el
     * nuevo [c.getDTOName()/] a una nueva lista
     *
     * @param entities Colección de entidades a convertir
     * @return Collección de instancias de [c.getDTOName()/]
     * @generated
     */
    public static List<[c.getDTOName()/]> listEntity2DTO(List<[c.getEntityName()/]> entities) {
        List<[c.getDTOName()/]> dtos = new ArrayList<[c.getDTOName()/]>();
        if (entities != null) {
            for ([c.getEntityName()/] entity : entities) {
                dtos.add(basicEntity2DTO(entity));
            }
        }
        return dtos;
    }

    /**
     * Convierte una colección de instancias de [c.getDTOName()/] a instancias de
     * [c.getEntityName()/] Para cada instancia se invoca el método basicDTO2Entity
     *
     * @param dtos entities Colección de [c.getDTOName()/] a convertir
     * @return Collección de instancias de [c.getEntityName()/]
     * @generated
     */
    public static List<[c.getEntityName()/]> listDTO2Entity(List<[c.getDTOName()/]> dtos) {
        List<[c.getEntityName()/]> entities = new ArrayList<[c.getEntityName()/]>();
        if (dtos != null) {
            for ([c.getDTOName()/] dto : dtos) {
                entities.add(basicDTO2Entity(dto));
            }
        }
        return entities;
    }
    [if (c.isChild())]

    [let parent : Property = c.getParentAttribute()]
    /**
     * Convierte una instancia de [c.getDTOName()/] a [c.getEntityName()/] asignando un valor
     * al atributo [parent/] de [c.getEntityName()/]. Se usa cuando se necesita convertir 
     * un [c.getDTOName()/] asignando el libro asociado
     * @param dto Instancia de [c.getDTOName()/]
     * @param parent Instancia de [parent.getClass().getEntityName()/]
     * @return Instancia de [c.getEntityName()/] con [parent.getClass().getEntityName()/] asociado
     * @generated
     */
    public static [c.getEntityName()/] childDTO2Entity([c.getDTOName()/] dto, [parent.getClass().getEntityName()/] parent){
        [c.getEntityName()/] entity = basicDTO2Entity(dto);
        entity.[parent.setter()/](parent);
        return entity;
    }

    /**
     * Convierte una colección de instancias de [c.getDTOName()/] a [c.getEntityName()/] 
     * asignando el mismo padre para todos. Se usa cuando se necesita crear o 
     * actualizar varios [c.getEntityName()/] con el mismo [parent/]
     * @param dtos Colección de instancias de [c.getDTOName()/]
     * @param parent Instancia de [parent.getClass().getEntityName()/]
     * @return Colección de [c.getEntityName()/] con el atributo [parent/] asignado
     * @generated
     */
    public static List<[c.getEntityName()/]> childListDTO2Entity(List<[c.getDTOName()/]> dtos, [parent.getClass().getEntityName()/] parent) {
        List<[c.getEntityName()/]> entities = new ArrayList<[c.getEntityName()/]>();
        if (dtos != null) {
            for ([c.getDTOName()/] dto : dtos) {
                entities.add(childDTO2Entity(dto, parent));
            }
        }
        return entities;
    }
    [/let]
    [/if]
}
[/file]
[/template]