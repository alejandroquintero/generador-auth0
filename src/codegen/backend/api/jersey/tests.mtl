[comment encoding = UTF-8 /]
[module tests('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]
[import backend::api::jersey::services /]

[template public mainTests(c : Class, path : String)]
[c.genTests(path.concat('tests/'))/]
[/template]

[template protected genTests(c : Class, path : String) {className : String = c.getServiceTestName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].tests;

import co.edu.uniandes.csw.auth.model.UserDTO;
import co.edu.uniandes.csw.auth.security.JWT;
[if (c.isChild())]
[for (cl : Class | c.getHierarchy())]
import [cl.getModel().baseGroup()/].entities.[cl.getEntityName()/];
[/for]
[else]
import [c.getModel().baseGroup()/].entities.[c.getEntityName()/];
[/if]
import [c.getModel().baseGroup()/].dtos.minimum.[c.getMinimumDTOName()/];
import [c.getModel().baseGroup()/].resources.[c.getJaxRsName()/];
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.transaction.UserTransaction;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import org.codehaus.jackson.map.ObjectMapper;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.junit.InSequence;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;


@RunWith(Arquillian.class)
public class [c.getServiceTestName()/] {

    private final int Ok = Status.OK.getStatusCode();
    private final int Created = Status.CREATED.getStatusCode();
    private final int OkWithoutContent = Status.NO_CONTENT.getStatusCode();
    private final String [c.testPath()/] = "[c.getURI()/]";
    private final static List<[c.getEntityName()/]> oraculo = new ArrayList<>();
    private WebTarget target;
    private final String apiPath = "api";
    private final String username = System.getenv("USERNAME_USER");
    private final String password = System.getenv("PASSWORD_USER");    
    [if (c.isChild())]
    [for (cl : Class | c.getHierarchy())]
    [if (cl.name<>c.name)]
    private final String [cl.testPath()/] = "[cl.getURI()/]";
    [cl.getEntityName()/] father[cl.name/]Entity;
    [/if]
    [/for]    
    [/if]

    @ArquillianResource
    private URL deploymentURL;

    @Deployment
    public static WebArchive createDeployment() {
        return ShrinkWrap.create(WebArchive.class)
                // Se agrega las dependencias
                .addAsLibraries(Maven.resolver().loadPomFromFile("pom.xml")
                        .importRuntimeDependencies().resolve()
                        .withTransitivity().asFile())
                // Se agregan los compilados de los paquetes de servicios
                .addPackage([c.getJaxRsName()/].class.getPackage())
                // El archivo que contiene la configuracion a la base de datos.
                .addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                // El archivo beans.xml es necesario para injeccion de dependencias.
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/beans.xml"))
                // El archivo shiro.ini es necesario para injeccion de dependencias
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/shiro.ini"))
                // El archivo web.xml es necesario para el despliegue de los servlets
                .setWebXML(new File("src/main/webapp/WEB-INF/web.xml"));
    }

    private WebTarget createWebTarget() {
        return ClientBuilder.newClient().target(deploymentURL.toString()).path(apiPath);
    }

    @PersistenceContext(unitName = "[c.getModel().getPUName()/]")
    private EntityManager em;

    @Inject
    private UserTransaction utx;

    private void clearData() {
        
    [if (c.isChild())]
        [for (cl : Class | c.getHierarchy())]
        em.createQuery("delete from [cl.getEntityName()/]").executeUpdate();
        [/for]
    [else]
        em.createQuery("delete from [c.getEntityName()/]").executeUpdate();    
    [/if]
        oraculo.clear();
    }

  

   /**
     * Datos iniciales para el correcto funcionamiento de las pruebas.
     *
     * @generated
     */
    public void insertData() {
        PodamFactory factory = new PodamFactoryImpl();
        [if (c.isChild())]
        [for (cl : Class | c.getHierarchy()->reverse())]
        [if (cl.name<>c.name)]        
        father[cl.name/]Entity = factory.manufacturePojo([cl.getEntityName()/].class);
        father[cl.name/]Entity.setId(1L);
        [if (cl.isChild())]
        father[cl.name/]Entity.set[cl.getParentAttribute().getClass().name/](father[cl.getParentAttribute().getClass().name/]Entity);
        [/if]        
        em.persist(father[cl.name/]Entity);
        [/if]
        [/for]
        
        [/if]
        for (int i = 0; i < 3; i++) {            
            [c.getEntityName()/] [c.getName()/] = factory.manufacturePojo([c.getEntityName()/].class);
            [c.getName()/].setId(i + 1L);
            [if (c.isChild())]
            [c.getName()/].set[c.getParentAttribute().getClass().name/](father[c.getParentAttribute().getClass().name/]Entity);
            [/if]
            em.persist([c.getName()/]);
            oraculo.add([c.getName()/]);
        }
    }

    /**
     * Login para poder consultar los diferentes servicios
     *
     * @param username Nombre de usuario
     * @param password Clave del usuario
     * @return Cookie con información de la sesión del usuario
     * @generated
     */
    public Cookie login(String username, String password) {
        UserDTO user = new UserDTO();
        user.setUserName(username);
        user.setPassword(password);
        user.setRememberMe(true);
        Response response = target.path("users").path("login").request()
                .post(Entity.entity(user, MediaType.APPLICATION_JSON));
        if (response.getStatus() == Ok) {
            return response.getCookies().get(JWT.cookieName);
        } else {
            return null;
        }
    }


    /**
     * Configuración inicial de la prueba.
     *
     * @generated
     */
    @Before
    public void setUpTest() {
        target = createWebTarget();
        try {
            utx.begin();
            clearData();
            insertData();
            utx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                utx.rollback();
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }
    }

    /**
     * Prueba para crear un [c.name/]
     *
     * @generated
     */
    @Test
    public void create[c.getServiceTestName()/]() throws IOException {
        PodamFactory factory = new PodamFactoryImpl();
        [c.getMinimumDTOName()/] [c.getName()/] = factory.manufacturePojo([c.getMinimumDTOName()/].class);
        Cookie cookieSessionId = login(username, password);
        [if (c.isChild())]
        Response response = target
        [for (cl : Class | c.getHierarchy()->reverse())]
            [if (cl.name<>c.name)]
            .path([cl.testPath()/]).path(father[cl.name/]Entity.getId().toString())
            [/if]            
        [/for]          .path([c.testPath()/])
            .request().cookie(cookieSessionId)
            .post(Entity.entity([c.getName()/], MediaType.APPLICATION_JSON));
        [else]
        Response response = target.path([c.testPath()/])
            .request().cookie(cookieSessionId)
            .post(Entity.entity([c.getName()/], MediaType.APPLICATION_JSON));
        [/if]
        
        [c.getMinimumDTOName()/]  [c.testName()/] = ([c.getMinimumDTOName()/]) response.readEntity([c.getMinimumDTOName()/].class);
        [for (prop : Property | c.attribute)]
        [if(not prop.isID())]
        Assert.assertEquals([c.getName()/].[prop.getter()/](), [c.testName()/].[prop.getter()/]());
        [/if]
        [/for]
        [if (c.isChild())]
        Assert.assertEquals(Ok, response.getStatus());
        [else]
        Assert.assertEquals(Created, response.getStatus());
        [/if]        
        [c.getEntityName()/] entity = em.find([c.getEntityName()/].class, [c.testName()/].getId());
        Assert.assertNotNull(entity);
    }

    /**
     * Prueba para consultar un [c.name/]
     *
     * @generated
     */
    @Test
    public void get[c.name/]ById() {
        Cookie cookieSessionId = login(username, password);
        [if (c.isChild())]        
        [c.getMinimumDTOName()/] [c.testName()/] = target
        [for (cl : Class | c.getHierarchy()->reverse())]
            [if (cl.name<>c.name)]
            .path([cl.testPath()/]).path(father[cl.name/]Entity.getId().toString())
            [/if]        
        [/for]          .path([c.testPath()/])
            .path(oraculo.get(0).getId().toString())
            .request().cookie(cookieSessionId).get([c.getMinimumDTOName()/].class);
        [else]
        [c.getMinimumDTOName()/] [c.testName()/] = target.path([c.testPath()/])
                .path(oraculo.get(0).getId().toString())
                .request().cookie(cookieSessionId).get([c.getMinimumDTOName()/].class);
        [/if]
        
        [for (prop : Property | c.attribute)]
        Assert.assertEquals([c.testName()/].[prop.getter()/](), oraculo.get(0).[prop.getter()/]());
        [/for]
    }

    /**
     * Prueba para consultar la lista de [c.name/]s
     *
     * @generated
     */
    @Test
    public void list[c.getServiceTestName()/]() throws IOException {
        Cookie cookieSessionId = login(username, password);
        [if (c.isChild())]
        Response response = target
        [for (cl : Class | c.getHierarchy()->reverse())]
            [if (cl.name<>c.name)]
            .path([cl.testPath()/]).path(father[cl.name/]Entity.getId().toString())
            [/if]            
        [/for]          .path([c.testPath()/])
            .request().cookie(cookieSessionId).get();
        [else]
        Response response = target.path([c.testPath()/])
                .request().cookie(cookieSessionId).get();
        [/if]
        
        String list[c.name/] = response.readEntity(String.class);
        List<[c.getMinimumDTOName()/]> list[c.name/]Test = new ObjectMapper().readValue(list[c.name/], List.class);
        Assert.assertEquals(Ok, response.getStatus());
        Assert.assertEquals(3, list[c.name/]Test.size());
    }

    /**
     * Prueba para actualizar un [c.name/]
     *
     * @generated
     */
    @Test
    public void update[c.getServiceTestName()/]() throws IOException {
        Cookie cookieSessionId = login(username, password);
        [c.getMinimumDTOName()/] [c.getName()/] = new [c.getMinimumDTOName()/](oraculo.get(0));
        PodamFactory factory = new PodamFactoryImpl();
        [c.getMinimumDTOName()/] [c.getName()/]Changed = factory.manufacturePojo([c.getMinimumDTOName()/].class);
        [for (prop : Property | c.attribute)]
        [if (not prop.isID())]
        [c.getName()/].[prop.setter()/]([c.getName()/]Changed.[prop.getter()/]());
        [/if]
        [/for]
        [if (c.isChild())]
        Response response = target
        [for (cl : Class | c.getHierarchy()->reverse())]
            [if (cl.name<>c.name)]
            .path([cl.testPath()/]).path(father[cl.name/]Entity.getId().toString())
            [/if]            
        [/for]          .path([c.testPath()/])
            .path([c.getName()/].getId().toString())
            .request().cookie(cookieSessionId).put(Entity.entity([c.getName()/], MediaType.APPLICATION_JSON));
        [else]
        Response response = target.path([c.testPath()/]).path([c.getName()/].getId().toString())
                .request().cookie(cookieSessionId).put(Entity.entity([c.getName()/], MediaType.APPLICATION_JSON));
        [/if]
        
        [c.getMinimumDTOName()/] [c.testName()/] = ([c.getMinimumDTOName()/]) response.readEntity([c.getMinimumDTOName()/].class);
        Assert.assertEquals(Ok, response.getStatus());
        [for (prop : Property | c.attribute)]
        [if (not prop.isID())]
        Assert.assertEquals([c.getName()/].[prop.getter()/](), [c.testName()/].[prop.getter()/]());
        [/if]
        [/for]
    }
    
    /**
     * Prueba para eliminar un [c.name/]
     *
     * @generated
     */
    @Test
    public void delete[c.getServiceTestName()/]() {
        Cookie cookieSessionId = login(username, password);
        [c.getMinimumDTOName()/] [c.getName()/] = new [c.getMinimumDTOName()/](oraculo.get(0));
        [if (c.isChild())]
        Response response = target
        [for (cl : Class | c.getHierarchy()->reverse())]
            [if (cl.name<>c.name)]
            .path([cl.testPath()/]).path(father[cl.name/]Entity.getId().toString())
            [/if]            
        [/for]          .path([c.testPath()/])
            .path([c.getName()/].getId().toString())
            .request().cookie(cookieSessionId).delete();
        [else]
        Response response = target.path([c.testPath()/]).path([c.getName()/].getId().toString())
                .request().cookie(cookieSessionId).delete();
        [/if]
        
        Assert.assertEquals(OkWithoutContent, response.getStatus());
    }
    [for (a : Property | c.getNonCompositeCollectionAttributes())]
    [c.genTestsNonComposite(a,path)/]
    [/for]
}
[/file]
[/template]

[template protected genTestsNonComposite(c : Class, a : Property, path : String) {className : String = a.getClass().getServiceTestName();}]
[file (path.concat(c.name+className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].tests;

import co.edu.uniandes.csw.auth.model.UserDTO;
import co.edu.uniandes.csw.auth.security.JWT;
[if (c.isChild())]
import [c.getModel().baseGroup()/].entities.[c.getParentAttribute().getClass().getEntityName()/];
[/if]
import [c.getModel().baseGroup()/].dtos.minimum.[c.getMinimumDTOName()/];
import [c.getModel().baseGroup()/].entities.[c.getEntityName()/];
import [c.getModel().baseGroup()/].dtos.minimum.[a.getDTOName()/];
import [c.getModel().baseGroup()/].entities.[a.getClass().getEntityName()/];
import [c.getModel().baseGroup()/].resources.[c.getJaxRsName()/];
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;
import javax.transaction.UserTransaction;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import org.codehaus.jackson.map.ObjectMapper;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.junit.InSequence;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;


@RunWith(Arquillian.class)
public class [c.name+className/] {

    private final int Ok = Status.OK.getStatusCode();
    private final int Created = Status.CREATED.getStatusCode();
    private final int OkWithoutContent = Status.NO_CONTENT.getStatusCode();
    private final String [c.testPath()/] = "[c.getURI()/]";
    private final static List<[c.getEntityName()/]> oraculo = new ArrayList<>();
    private final String [a.testPath()/] = "[a.name/]";
    private final static List<[a.getClass().getEntityName()/]> [a.getOraculo()/] = new ArrayList<>();
    private WebTarget target;
    private final String apiPath = "api";
    private final String username = System.getenv("USERNAME_USER");
    private final String password = System.getenv("PASSWORD_USER");    
    [if (c.isChild())]
    private final String [c.getParentAttribute().getClass().testPath()/] = "[c.getParentAttribute().getClass().getURI()/]";
    [c.getParentAttribute().getClass().getEntityName()/] fatherEntity;
    [/if]

    @ArquillianResource
    private URL deploymentURL;

    @Deployment
    public static WebArchive createDeployment() {
        return ShrinkWrap.create(WebArchive.class)
                // Se agrega las dependencias
                .addAsLibraries(Maven.resolver().loadPomFromFile("pom.xml")
                        .importRuntimeDependencies().resolve()
                        .withTransitivity().asFile())
                // Se agregan los compilados de los paquetes de servicios
                .addPackage([c.getJaxRsName()/].class.getPackage())
                // El archivo que contiene la configuracion a la base de datos.
                .addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                // El archivo beans.xml es necesario para injeccion de dependencias.
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/beans.xml"))
                // El archivo shiro.ini es necesario para injeccion de dependencias
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/shiro.ini"))
                // El archivo web.xml es necesario para el despliegue de los servlets
                .setWebXML(new File("src/main/webapp/WEB-INF/web.xml"));
    }

    private WebTarget createWebTarget() {
        return ClientBuilder.newClient().target(deploymentURL.toString()).path(apiPath);
    }

    @PersistenceContext(unitName = "[c.getModel().getPUName()/]")
    private EntityManager em;

    @Inject
    private UserTransaction utx;

    private void clearData() {
        em.createQuery("delete from [a.getClass().getEntityName()/]").executeUpdate();
    [if (c.isChild())]
        em.createQuery("delete from [c.getParentAttribute().getClass().getEntityName()/]").executeUpdate();
    [/if]
        em.createQuery("delete from [c.getEntityName()/]").executeUpdate();
        [a.getOraculo()/].clear();
        oraculo.clear();
    }

  

   /**
     * Datos iniciales para el correcto funcionamiento de las pruebas.
     *
     * @generated
     */
    public void insertData() {
        try{
            PodamFactory factory = new PodamFactoryImpl();
            [if (c.isChild())]
            fatherEntity = factory.manufacturePojo([c.getParentAttribute().getClass().getEntityName()/].class);
            fatherEntity.setId(1L);
            utx.begin();
            em.persist(fatherEntity);
            utx.commit();
            [/if]
            for (int i = 0; i < 3; i++) {   
                [if (a.isRelationshipOwner())]
                [a.getClass().getEntityName()/] [a.name/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
                [a.name/].setId(i + 1L);
                utx.begin();
                em.persist([a.name/]);
                utx.commit();
                [a.getOraculo()/].add([a.name/]);
                     
                [c.getEntityName()/] [c.getName()/] = factory.manufacturePojo([c.getEntityName()/].class);
                [c.getName()/].setId(i + 1L);
                [c.getName()/].[a.getter()/]().add([a.name/]);
                [if (c.isChild())]
                [c.getName()/].set[c.getParentAttribute().getClass().name/](fatherEntity);
                [/if]
                utx.begin();
                em.persist([c.getName()/]);
                utx.commit();
                oraculo.add([c.getName()/]);     
                [else]
                [if (a.getOtherEnd().getUpper() = 1)]
                [c.getEntityName()/] [c.getName()/] = factory.manufacturePojo([c.getEntityName()/].class);
                [c.getName()/].setId(i + 1L);
                [if (c.isChild())]
                [c.getName()/].set[c.getParentAttribute().getClass().name/](fatherEntity);
                [/if]
                utx.begin();
                em.persist([c.getName()/]);
                utx.commit();
                oraculo.add([c.getName()/]);

                [a.getClass().getEntityName()/] [a.name/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
                [a.name/].setId(i + 1L);
                [a.name/].set[c.name/]([c.getName()/]);    
                utx.begin();
                em.persist([a.name/]);
                utx.commit();
                [a.getOraculo()/].add([a.name/]);                     
                
                [else]
                [c.getEntityName()/] [c.getName()/] = factory.manufacturePojo([c.getEntityName()/].class);
                [c.getName()/].setId(i + 1L);
                [if (c.isChild())]
                [c.getName()/].set[c.getParentAttribute().getClass().name/](fatherEntity);
                [/if]
                utx.begin();
                em.persist([c.getName()/]);
                utx.commit();
                oraculo.add([c.getName()/]);

                [a.getClass().getEntityName()/] [a.name/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
                [a.name/].setId(i + 1L);
                [a.name/].get[c.name/]s().add([c.getName()/] );
                utx.begin();
                em.persist([a.name/]);
                utx.commit();
                [a.getOraculo()/].add([a.name/]);                     

                [/if]
                [/if]          
                
            }
            } catch (Exception e) {
                e.printStackTrace();
                try {
                    utx.rollback();
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }
    }

    /**
     * Login para poder consultar los diferentes servicios
     *
     * @param username Nombre de usuario
     * @param password Clave del usuario
     * @return Cookie con información de la sesión del usuario
     * @generated
     */
    public Cookie login(String username, String password) {
        UserDTO user = new UserDTO();
        user.setUserName(username);
        user.setPassword(password);
        user.setRememberMe(true);
        Response response = target.path("users").path("login").request()
                .post(Entity.entity(user, MediaType.APPLICATION_JSON));
        if (response.getStatus() == Ok) {
            return response.getCookies().get(JWT.cookieName);
        } else {
            return null;
        }
    }


    /**
     * Configuración inicial de la prueba.
     *
     * @generated
     */
    @Before
    public void setUpTest() {
        target = createWebTarget();
        try {
            utx.begin();
            clearData();
            utx.commit();
            insertData();            
        } catch (Exception e) {
            e.printStackTrace();
            try {
                utx.rollback();
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }
    }

    
    /**
     *Prueba para asociar un [a.name.toUpperFirst()/] existente a un [c.name/]
     *
     * @generated
     */
    @Test
    public void add[a.getTestSuffix()/]() {
        Cookie cookieSessionId = login(username, password);

        [a.getDTOName()/] [a.name/] = new [a.getDTOName()/]([a.getOraculo()/].get(1));
        [c.getMinimumDTOName()/] [c.getName()/] = new [c.getMinimumDTOName()/](oraculo.get(0));

        Response response = target.path([c.testPath()/]).path([c.getName()/].getId().toString())
                .path([a.testPath()/]).path([a.name/].getId().toString())
                .request().cookie(cookieSessionId)
                .post(Entity.entity([a.name/], MediaType.APPLICATION_JSON));

        [a.getDTOName()/] [a.getResponseVarName()/] = ([a.getDTOName()/]) response.readEntity([a.getDTOName()/].class);
        Assert.assertEquals(Ok, response.getStatus());
        Assert.assertEquals([a.name/].getId(), [a.getResponseVarName()/].getId());
    }

    /**
     * Prueba para obtener una colección de instancias de [a.name.toUpperFirst()/] asociadas a una instancia [c.name/]
     *
     * @generated
     */
    @Test
    public void list[a.getTestSuffix()/]() throws IOException {
        Cookie cookieSessionId = login(username, password);
        [c.getMinimumDTOName()/] [c.getName()/] = new [c.getMinimumDTOName()/](oraculo.get(0));

        Response response = target.path([c.testPath()/])
                .path([c.getName()/].getId().toString())
                .path([a.testPath()/])
                .request().cookie(cookieSessionId).get();

        String [a.name/]List = response.readEntity(String.class);
        List<[a.getDTOName()/]> [a.name/]ListTest = new ObjectMapper().readValue([a.name/]List, List.class);
        Assert.assertEquals(Ok, response.getStatus());
        Assert.assertEquals(1, [a.name/]ListTest.size());
    }

    /**
     * Prueba para obtener una instancia de [a.name.toUpperFirst()/] asociada a una instancia [c.name/]
     *
     * @generated
     */
    @Test
    public void get[a.getTestSuffix()/]() throws IOException {
        Cookie cookieSessionId = login(username, password);
        [a.getDTOName()/] [a.name/] = new [a.getDTOName()/]([a.getOraculo()/].get(0));
        [c.getMinimumDTOName()/] [c.getName()/] = new [c.getMinimumDTOName()/](oraculo.get(0));

        [a.getDTOName()/] [a.getResponseVarName()/] = target.path([c.testPath()/])
                .path([c.getName()/].getId().toString()).path([a.testPath()/])
                .path([a.name/].getId().toString())
                .request().cookie(cookieSessionId).get([a.getDTOName()/].class);

        [for (prop : Property | a.getClass().attribute)]
        Assert.assertEquals([a.name/].[prop.getter()/](), [a.getResponseVarName()/].[prop.getter()/]());
        [/for]
    }

    /**
     * Prueba para desasociar un [a.name.toUpperFirst()/] existente de un [c.name/] existente
     *
     * @generated
     */
    @Test
    public void remove[a.getTestSuffix()/]() {
        Cookie cookieSessionId = login(username, password);

        [a.getDTOName()/] [a.name/] = new [a.getDTOName()/]([a.getOraculo()/].get(0));
        [c.getMinimumDTOName()/] [c.getName()/] = new [c.getMinimumDTOName()/](oraculo.get(0));

        Response response = target.path([c.testPath()/]).path([c.getName()/].getId().toString())
                .path([a.testPath()/]).path([a.name/].getId().toString())
                .request().cookie(cookieSessionId).delete();
        Assert.assertEquals(OkWithoutContent, response.getStatus());
    }
}
[/file]
[/template]


[template private getURI(a : Property)]
[a.name.toLowerFirst()/]
[/template]

[template private testPath(a : Property)]
[a.name.toLowerFirst().concat('Path')/]
[/template]

[template private testPath(c : Class)]
[c.name.toLowerFirst().concat('Path')/]
[/template]

[template private getTestSuffix(a : Property)]
[a.name.toUpperFirst()/]Test
[/template]

[template private getOraculo(a : Property)]
oraculo[a.name.toUpperFirst()/]
[/template]

[template private getResponseVarName(a : Property)]
[a.name.toLower().concat('Test')/]
[/template]

[template private getDTOName(a : Property)]
[a.getClass().getMinimumDTOName()/]
[/template]
