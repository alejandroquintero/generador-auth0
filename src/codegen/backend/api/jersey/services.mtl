[comment encoding = UTF-8 /]
[module services('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainJersey(c : Class, path : String)]
[let filePath : String = path.concat('resources/')]
    [c.restClass(filePath)/]
[/let]
[/template]

[template protected restClass(c : Class, path : String) {className : String = c.getJaxRsName(); logic : String = c.getName().concat('Logic');}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].resources;

import co.edu.uniandes.csw.auth.provider.StatusCreated;
import java.util.List;
import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import [c.getModel().baseGroup()/].api.[c.getAPIName()/];
import [c.getModel().baseGroup()/].dtos.basic.[c.getBasicDTOName()/];
import [c.getModel().baseGroup()/].dtos.full.[c.getFullDTOName()/];
import [c.getModel().baseGroup()/].entities.[c.getEntityName()/];
[for (a : Property | c.getNonCompositeCollectionAttributes())]
import [c.getModel().baseGroup()/].dtos.basic.[a.getClass().getBasicDTOName()/];
import [c.getModel().baseGroup()/].dtos.full.[a.getClass().getFullDTOName()/];
import [c.getModel().baseGroup()/].entities.[a.getClass().getEntityName()/];
[/for]
import java.util.ArrayList;
/**
 * @generated
 */
@Path("/[c.getURI()/]")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class [className/] {

    @Inject private [c.getAPIName()/] [logic/];
    @Context private HttpServletResponse response;
    @QueryParam("page") private Integer page;
    @QueryParam("maxRecords") private Integer maxRecords;

   
    /**
     * Convierte una lista de [c.getEntityName()/] a una lista de [c.getBasicDTOName()/].
     *
     * @param entityList Lista de [c.getEntityName()/] a convertir.
     * @return Lista de [c.getBasicDTOName()/] convertida.
     * @generated
     */
    private List<[c.getBasicDTOName()/]> listEntity2DTO(List<[c.getEntityName()/]> entityList){
        List<[c.getBasicDTOName()/]> list = new ArrayList<>();
        for ([c.getEntityName()/] entity : entityList) {
            list.add(new [c.getBasicDTOName()/](entity));
        }
        return list;
    }

[for (a : Property | c.getNonCompositeCollectionAttributes())]
    /**
     * Convierte una lista de [a.getClass().getEntityName()/] a una lista de [a.getClass().getBasicDTOName()/].
     *
     * @param entityList Lista de [a.getClass().getEntityName()/] a convertir.
     * @return Lista de [a.getClass().getBasicDTOName()/] convertida.
     * @generated
     */
    private List<[a.getClass().getBasicDTOName()/]> [a.name/]ListEntity2DTO(List<[a.getClass().getEntityName()/]> entityList){
        List<[a.getClass().getBasicDTOName()/]> list = new ArrayList<>();
        for ([a.getClass().getEntityName()/] entity : entityList) {
            list.add(new [a.getClass().getBasicDTOName()/](entity));
        }
        return list;
    }

    /**
     * Convierte una lista de [a.getClass().getBasicDTOName()/] a una lista de [a.getClass().getEntityName()/].
     *
     * @param dtos Lista de [a.getClass().getBasicDTOName()/] a convertir.
     * @return Lista de [a.getClass().getEntityName()/] convertida.
     * @generated
     */
    private List<[a.getClass().getEntityName()/]> [a.name/]ListDTO2Entity(List<[a.getClass().getBasicDTOName()/]> dtos){
        List<[a.getClass().getEntityName()/]> list = new ArrayList<>();
        for ([a.getClass().getBasicDTOName()/] dto : dtos) {
            list.add(dto.toEntity());
        }
        return list;
    }
[/for]

    /**
     * Obtiene la lista de los registros de [c.name/].
     *
     * @return Colección de objetos de [c.getBasicDTOName()/] cada uno con sus respectivos Review
     * @generated
     */
    @GET
    public List<[c.getBasicDTOName()/]> get[c.name/]s() {
        if (page != null && maxRecords != null) {
            this.response.setIntHeader("X-Total-Count", [logic/].count[c.name/]s());
            return listEntity2DTO([logic/].get[c.name/]s(page, maxRecords));
        }
        return listEntity2DTO([logic/].get[c.name/]s());
    }

    /**
     * Obtiene los datos de una instancia de [c.name/] a partir de su ID.
     *
     * @param id Identificador de la instancia a consultar
     * @return Instancia de [c.getFullDTOName()/] con los datos del [c.name/] consultado y sus Review
     * @generated
     */
    @GET
    @Path("{id: \\d+}")
    public [c.getFullDTOName()/] get[c.name/](@PathParam("id") Long id) {
        return new [c.getFullDTOName()/]([logic/].get[c.name/](id));
    }

    /**
     * Se encarga de crear un [c.name/] en la base de datos.
     *
     * @param dto Objeto de [c.getFullDTOName()/] con los datos nuevos
     * @return Objeto de [c.getFullDTOName()/]con los datos nuevos y su ID.
     * @generated
     */
    @POST
    @StatusCreated
    public [c.getFullDTOName()/] create[c.name/]([c.getFullDTOName()/] dto) {
        return new [c.getFullDTOName()/]([logic/].create[c.name/](dto.toEntity()));
    }

    /**
     * Actualiza la información de una instancia de [c.name/].
     *
     * @param id Identificador de la instancia de [c.name/] a modificar
     * @param dto Instancia de [c.getFullDTOName()/] con los nuevos datos.
     * @return Instancia de [c.getFullDTOName()/] con los datos actualizados.
     * @generated
     */
    @PUT
    @Path("{id: \\d+}")
    public [c.getFullDTOName()/] update[c.name/](@PathParam("id") Long id, [c.getFullDTOName()/] dto) {
        [c.getEntityName()/] entity = dto.toEntity();
        entity.setId(id);
        [c.getEntityName()/] oldEntity = [logic/].get[c.name/](id);
        [for (a : Property | c.getNonCompositeCollectionAttributes())]
        entity.[a.setter()/](oldEntity.[a.getter()/]());
        [/for]
        return new [c.getFullDTOName()/]([logic/].update[c.name/](entity));
    }

    /**
     * Elimina una instancia de [c.name/] de la base de datos.
     *
     * @param id Identificador de la instancia a eliminar.
     * @generated
     */
    @DELETE
    @Path("{id: \\d+}")
    public void delete[c.name/](@PathParam("id") Long id) {
        [logic/].delete[c.name/](id);
    }
[for (a : Property | c.getNonCompositeCollectionAttributes())]

    /**
     * Obtiene una colección de instancias de [a.getClass().getBasicDTOName()/] asociadas a una
     * instancia de [c.name/]
     *
     * @param [c.getEntityId()/] Identificador de la instancia de [c.name/]
     * @return Colección de instancias de [a.getClass().getBasicDTOName()/] asociadas a la instancia de [c.name/]
     * @generated
     */
    @GET
    @Path("{[c.getEntityId()/]: \\d+}/[a.name/]")
    public List<[a.getClass().getBasicDTOName()/]> list[a.name.toUpperFirst()/](@PathParam("[c.getEntityId()/]") Long [c.getEntityId()/]) {
        return [a.name/]ListEntity2DTO([logic/].list[a.name.toUpperFirst()/]([c.getEntityId()/]));
    }

    /**
     * Obtiene una instancia de [a.getClass().name/] asociada a una instancia de [c.name/]
     *
     * @param [c.getEntityId()/] Identificador de la instancia de [c.name/]
     * @param [a.getClass().getEntityId()/] Identificador de la instancia de [a.getClass().name/]
     * @generated
     */
    @GET
    @Path("{[c.getEntityId()/]: \\d+}/[a.name/]/{[a.getClass().getEntityId()/]: \\d+}")
    public [a.getClass().getFullDTOName()/] get[a.name.toUpperFirst()/](@PathParam("[c.getEntityId()/]") Long [c.getEntityId()/], @PathParam("[a.getClass().getEntityId()/]") Long [a.getClass().getEntityId()/]) {
        return new [a.getClass().getFullDTOName()/]([logic/].get[a.name.toUpperFirst()/]([c.getEntityId()/], [a.getClass().getEntityId()/]));
    }

    /**
     * Asocia un [a.getClass().name/] existente a un [c.name/]
     *
     * @param [c.getEntityId()/] Identificador de la instancia de [c.name/]
     * @param [a.getClass().getEntityId()/] Identificador de la instancia de [a.getClass().name/]
     * @return Instancia de [a.getClass().getFullDTOName()/] que fue asociada a [c.name/]
     * @generated
     */
    @POST
    @Path("{[c.getEntityId()/]: \\d+}/[a.name/]/{[a.getClass().getEntityId()/]: \\d+}")
    public [a.getClass().getFullDTOName()/] add[a.name.toUpperFirst()/](@PathParam("[c.getEntityId()/]") Long [c.getEntityId()/], @PathParam("[a.getClass().getEntityId()/]") Long [a.getClass().getEntityId()/]) {
        return new [a.getClass().getFullDTOName()/]([logic/].add[a.name.toUpperFirst()/]([c.getEntityId()/], [a.getClass().getEntityId()/]));
    }

    /**
     * Remplaza las instancias de [a.getClass().name/] asociadas a una instancia de [c.name/]
     *
     * @param [c.getEntityId()/] Identificador de la instancia de [c.name/]
     * @param [a.getClass().getURI()/] Colección de instancias de [a.getClass().getDTOName()/] a asociar a instancia de [c.name/]
     * @return Nueva colección de [a.getClass().getDTOName()/] asociada a la instancia de [c.name/]
     * @generated
     */
    @PUT
    @Path("{[c.getEntityId()/]: \\d+}/[a.name/]")
    public List<[a.getClass().getBasicDTOName()/]> replace[a.name.toUpperFirst()/](@PathParam("[c.getEntityId()/]") Long [c.getEntityId()/], List<[a.getClass().getBasicDTOName()/]> [a.getClass().getURI()/]) {
        return [a.name/]ListEntity2DTO([logic/].replace[a.name.toUpperFirst()/]([c.getEntityId()/], [a.name/]ListDTO2Entity([a.getClass().getURI()/])));
    }

    /**
     * Desasocia un [a.getClass().name/] existente de un [c.name/] existente
     *
     * @param [c.getEntityId()/] Identificador de la instancia de [c.name/]
     * @param [a.getClass().getEntityId()/] Identificador de la instancia de [a.getClass().name/]
     * @generated
     */
    @DELETE
    @Path("{[c.getEntityId()/]: \\d+}/[a.name/]/{[a.getClass().getEntityId()/]: \\d+}")
    public void remove[a.name.toUpperFirst()/](@PathParam("[c.getEntityId()/]") Long [c.getEntityId()/], @PathParam("[a.getClass().getEntityId()/]") Long [a.getClass().getEntityId()/]) {
        [logic/].remove[a.name.toUpperFirst()/]([c.getEntityId()/], [a.getClass().getEntityId()/]);
    }
[/for]
}
[/file]
[/template]

[template public getJaxRsName(c : Class)]
[c.name.toUpperFirst().concat('Service')/]
[/template]
