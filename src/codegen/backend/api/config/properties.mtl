[comment encoding = UTF-8 /]
[module properties('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainProperties(m : Model)]
[m.genAuth0Properties(m.basePathAuth0())/]
[m.genGetChromeDriver(m.basePathAuth0())/]
[/template]

[template protected genAuth0Properties(m : Model, path: String)]
[file (path.concat('auth0.properties'),false,'UTF-8')]
# To change this license header, choose License Headers in Project Properties.
# To change this template file, choose Tools | Templates
# and open the template in the editor.
groupName=Artwork
audience=urn:auth0-authz-api
grantType=password
connection=Username-Password-Authentication
scope=openid
idTokenResource=https://otroother14.auth0.com/oauth/ro
accessToken=https://otroother14.auth0.com/oauth/token
userInfo=https://otroother14.auth0.com/userinfo
tokenInfo=https://otroother14.auth0.com/tokeninfo
users=https://otroother14.auth0.com/api/v2/users
managementAudience=https://otroother14.auth0.com/api/v2/
logout=https://otroother14.auth0.com/logout?returnTo=http://localhost:8080/artwork-api/api/login
signUp=https://otroother14.auth0.com/dbconnections/signup

# auth0:authz authorization url

authorizationExtension=https://otroother14.us.webtask.io/adf6e2f2b84784b57522e3b19dfc9201/api

# non interactive authentication client credentials

authenticationClientId=zfDwIObcHlRtHuu5idr931iPnfzYSU91
authenticationSecretKey=SciP3KUkBTtCk_uJazsr-5kYSY3RKzdKkwJ17kE9GZt_2bxyqrFKET0qfrts06Ro

# management client credentials

managementClientId=6ivKAXVBdQAGd4dlL9BBOrOSFXc1Hlsn
managementSecretKey=xn9aAaF929uGyHPXK7__b7YGcuKkw3ihbY0Vaz9ILPIaFV2sdD3q7iZ8G1MtfjrY

# allowed resources for unauthenticated user 

/api/users
/api/clients

# login variables for testing

username=suno@shine.com
password=Sunshine3
[/file]
[/template]

[template protected genGetChromeDriver(m : Model, path: String)]
[file (path.concat('GetDriver.java'),false,'UTF-8')]
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.uniandes.csw.auth.properties;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;

/**
 *
 * @author Asistente
 */
public class GetDriver {

    public static void main(String['['/]] args) throws IOException {
         
        URL website = new URL("https://chromedriver.storage.googleapis.com/2.30/chromedriver_win32.zip");
        ReadableByteChannel rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream("chromeDriv.zip");
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        String zipFilePath = "chromeDriv.zip";
        String destDir = "[m.getApiArtifactId()/]/drivers";
        try {
            unzip(zipFilePath, destDir);
        } catch (Exception ex) {
            System.out.println("file already exist");
        }
        File zip = new File("chromeDriv.zip");
        Files.delete(zip.toPath());
    }

    private static void unzip(String zipFilePath, String destDir) {
        File dir = new File(destDir);
        // create output directory if it doesn't exist
        if (!dir.exists()) {
            dir.mkdirs();
        }else{
        throw new Exception();
        }
        FileInputStream fis;
        //buffer for read and write data to file
        byte['['/]] buffer = new byte['['/]1024];
        try {
            fis = new FileInputStream(zipFilePath);
            ZipInputStream zis = new ZipInputStream(fis);
            ZipEntry ze = zis.getNextEntry();
            while (ze != null) {
                String fileName = ze.getName();
                File newFile = new File(destDir + File.separator + fileName);
                System.out.println("Unzipping to " + newFile.getAbsolutePath());
                //create directories for sub directories in zip
                new File(newFile.getParent()).mkdirs();
                FileOutputStream fos = new FileOutputStream(newFile);
                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }
                fos.close();
                //close this ZipEntry
                zis.closeEntry();
                ze = zis.getNextEntry();
            }
            //close last ZipEntry
            zis.closeEntry();
            zis.close();
            fis.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

}
[/file]
[/template]


