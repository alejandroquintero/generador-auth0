[comment encoding = UTF-8 /]
[module tests('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainIntConfig(m : Model, path : String)]
[m.genE2EConf(path.concat('test/'))/]
[/template]

[template public genIntTest(c : Class, path : String)]
[c.genTests(path.concat('test/'))/]
[/template]


[template protected genE2EConf(m : Model, path : String)]
[file (path.concat('e2e.conf.js'), false, 'UTF-8')]
exports.config = {
    allScriptsTimeout: 11000,
    specs: ['['/]
        'e2e/*.js'
    ],
    capabilities: {
        'browserName': 'firefox'
    },
    baseUrl: 'http://localhost:9001/',
    framework: 'jasmine2',
    jasmineNodeOpts: {
        showColors: true,
        defaultTimeoutInterval: 30000
    }
};
[/file]
[/template]

[template protected genTests(c : Class, path : String)]
[if (c.isChild()=false)]
[file (path.concat('e2e/' + c.specName() + '.specs.js'), false, 'UTF-8')]
describe('[c.name/] E2E Testing', function () {

	beforeEach(function () {
        browser.addMockModule('ngCrudMock', function () {
			angular.module('ngCrudMock').constant('ngCrudMock.baseUrl','api')[if(c.hasReferences(false))].run(
	                function()
	                {
	                    [for (a : Property | c.getReferences(false))]
							
						var record = JSON.parse('{[for (p : Property | a.getClass().getAllAttribs()) separator(',')]"[p.name/]": "Val[(i+1)/]"[/for] }');
	                    record.id = 100;
	                    mockRecords['['/][a.getClass().specName()/]].push(record);
	
						[/for]
	                }
	        [/if]);
		
        });
    });

    it('should create one [c.specName()/]', function () {
        browser.get('#/[c.specName()/]');
        element(by.id('create-[c.specName()/]')).click();
		[for (a : Property | c.getAllAttribs())]
        element(by.id('[a.name/]')).sendKeys('Val[(i+1)/]');
		[/for]
		[for (a : Property | c.getReferences(false))]
		var select[a.getClass().getEntityName()/] = element(by.id('[a.name/]'));
        select[a.getClass().getEntityName()/].$('['['/]value="100"]').click();
		[/for]
        element(by.id('save-[c.specName()/]')).click();
        expect(element.all(by.repeater('record in records')).count()).toEqual(1);
    });
    
    it('should read one [c.specName()/]', function () {
        [for (a : Property | c.getAllAttribs())]
		expect(element(by.id('0-[a.name/]')).getText()).toBe("Val[(i+1)/]");
        [/for]
    });
    
    it('should edit one [c.specName()/]', function () {
        element(by.id('0-edit-btn')).click();
		
		[for (a : Property | c.getAllAttribs())]
        element(by.id('[a.name/]')).clear().sendKeys('NewVal[(i+1)/]');
        [/for]

        element(by.id('save-[c.specName()/]')).click();

		[for (a : Property | c.getAllAttribs())]
		expect(element(by.id('0-[a.name/]')).getText()).toBe("NewVal[(i+1)/]");
        [/for]
    });
    
    it('should delete the [c.specName()/]', function () {
        element(by.id('0-delete-btn')).click();
		[for (a : Property | c.getAllAttribs())]
		expect(element.all(by.id('0-[a.name/]')).count()).toEqual(0);
        [/for]
    });
});
[/file]
[/if]
[/template]
