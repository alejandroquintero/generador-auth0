[comment encoding = UTF-8 /]
[module postmanTest('http://www.eclipse.org/uml2/5.0.0/UML') extends backend::api::jersey::services ]
[import ::utils /]

[template public mainPostman(c : Class, path : String)]
[let genPath : String = path.concat('tests/postman/')]
    [c.genPostmanTests(genPath)/]
    [c.genCollectionPrepare(genPath.concat('collections/'))/]
    [for (a : Property | c.getNonCompositeCollectionAttributes())]
        [a.genPostmanTestsNonComposite(genPath)/]
    [/for]
[/let]
[/template]

[template private genPostmanTests(c : Class, path : String) {className : String = c.getTestName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].tests.postman;

import [c.getModel().baseGroup()/].tests.postman.collections.[c.name/]Prepare;
[for (cl : Class | c.getHierarchy())]
import [cl.getModel().baseGroup()/].entities.[cl.getEntityName()/];
[/for]
import [c.getModel().baseGroup()/].dtos.detail.[c.getBasicDTOName()/];
import [c.getModel().baseGroup()/].resources.[c.getJaxRsName()/];
import [c.getModel().baseGroup()/].tests.Utils;
import com.mashape.unirest.http.exceptions.UnirestException;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.util.logging.Logger;
import javax.inject.Inject;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.inject.Inject;
import javax.transaction.UserTransaction;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import org.codehaus.jackson.map.ObjectMapper;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/*
 * Testing URI: [c.getFullURI()/]
 */
@RunWith(Arquillian.class)
public class [className/] {
 
    private static final String BASEPATH = System.getProperty("user.dir");
   String path= BASEPATH.concat("\\collections\\runners\\[c.getURI().concat('CollectionRunner.bat')/]");
   PodamFactory factory = new PodamFactoryImpl();
   JSONParser parser = new JSONParser();
   Gson gson = new Gson();

    private WebTarget target;
    private final String apiPath = Utils.apiPath;

    private final static List<[c.getEntityName()/]> oraculo = new ArrayList<>();

    [for (cl : Class | c.getHierarchy()->reverse())]
    private final String [cl.testPath()/] = "[cl.getURI()/]";
    [/for]

    [for (cl : Class | c.getHierarchy()->reverse()->reject(name = c.name))]
    [cl.getEntityName()/] [cl.getFatherEntity()/];
    [/for]

    @ArquillianResource
    private URL deploymentURL;

    @Deployment
    public static WebArchive createDeployment() {
        return ShrinkWrap.create(WebArchive.class)
                // Se agrega las dependencias
                .addAsLibraries(Maven.resolver().loadPomFromFile("pom.xml")
                        .importRuntimeDependencies().resolve()
                        .withTransitivity().asFile())
                // Se agregan los compilados de los paquetes de servicios
                .addPackage([c.getJaxRsName()/].class.getPackage())
                .addPackage("co.edu.uniandes.csw.auth.properties")
                // El archivo que contiene la configuracion a la base de datos.
                .addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                // El archivo beans.xml es necesario para injeccion de dependencias.
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/beans.xml"))
                
                // El archivo web.xml es necesario para el despliegue de los servlets
                .setWebXML(new File("src/main/webapp/WEB-INF/web.xml"));
    }

    private WebTarget createWebTarget() {
        return ClientBuilder.newClient().target(deploymentURL.toString()).path(apiPath);
    }

    @PersistenceContext(unitName = "[c.getModel().getPUName()/]")
    private EntityManager em;

    @Inject
    private UserTransaction utx;

    private void clearData() {
        [for (cl : Class | c.getHierarchy())]
        em.createQuery("delete from [cl.getEntityName()/]").executeUpdate();
        [/for]
        oraculo.clear();
    }

   /**
     * Datos iniciales para el correcto funcionamiento de las pruebas.
     *
     * @generated
     */
    public void insertData() {
        [for (cl : Class | c.getHierarchy()->reverse()->reject(name = c.name))]
        [cl.getFatherEntity()/] = factory.manufacturePojo([cl.getEntityName()/].class);
        [cl.getFatherEntity()/].setId(1L);
        [if (cl.isChild())]
        [cl.getFatherEntity()/].[cl.getParentAttribute().setter()/]([cl.getParentAttribute().getClass().getFatherEntity()/]);
        [/if]
        em.persist([cl.getFatherEntity()/]);

        [/for]
        [if (c.isChild() and c.getParentAttribute().isOne2One())]        
            [c.getEntityName()/] [c.getName()/] = factory.manufacturePojo([c.getEntityName()/].class);
            [c.getName()/].setId(1L);
            [if (c.isChild())]
            [c.getName()/].[c.getParentAttribute().setter()/]([c.getParentAttribute().getClass().getFatherEntity()/]);
            [/if]
            em.persist([c.getName()/]);
            oraculo.add([c.getName()/]);
        [else]
        for (int i = 0; i < 3; i++) {            
            [c.getEntityName()/] [c.getName()/] = factory.manufacturePojo([c.getEntityName()/].class);
            [c.getName()/].setId(i + 1L);
            [if (c.isChild())]
            [c.getName()/].[c.getParentAttribute().setter()/]([c.getParentAttribute().getClass().getFatherEntity()/]);
            [/if]
            em.persist([c.getName()/]);
            oraculo.add([c.getName()/]);
        }
        [/if]
    }

    /**
     * ConfiguraciÃ³n inicial de la prueba.
     *
     * @generated
     */
    @Before
    public void setUpTest() {
        try {
            utx.begin();
            clearData();
            insertData();
            utx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                utx.rollback();
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }
        target = createWebTarget()
            [for (cl : Class | c.getHierarchy()->reverse()->reject(c1 | c1.name = c.name))]
                .path([cl.testPath()/])
                .path([cl.getFatherEntity()/].getId().toString())
            [/for]
                .path([c.testPath()/]);
    }

    public void setPostmanCollectionValues(String action) throws FileNotFoundException, IOException, ParseException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, UnirestException, JSONException, InterruptedException, ExecutionException{
    
    try(FileWriter wrt = new FileWriter(path)){
        wrt.write("newman run ".concat(BASEPATH.concat("\\collections\\postman_collection[c.name/].json").concat(" -e ").concat(BASEPATH.concat("\\collections\\postman_env.json").concat(" --disable-unicode"))));
    wrt.flush();
    }
     
    Object obj;
       try (FileReader reader = new FileReader([c.name/]Prepare.getPATH())) {
           obj = parser.parse(reader);
       } 
       try (FileWriter writer = new FileWriter([c.name/]Prepare.getPATH())) {
           [c.getBasicDTOName()/] [c.name/] = factory.manufacturePojo([c.getBasicDTOName()/].class);
           JsonArray jsonArray=gson.toJsonTree(obj).getAsJsonObject().get("item").getAsJsonArray();
           Integer index= [c.name/]Prepare.findJsonIndex(jsonArray,action);
           JsonElement jsonElement=gson.toJsonTree(obj);
           [c.name/]Prepare.setCollectionBody(jsonElement, index, [c.name/], gson);
           writer.write(jsonElement.toString());
           writer.flush();
       }
}


    @Test 
    public void postman() throws FileNotFoundException, IOException, ParseException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, UnirestException, JSONException, InterruptedException, ExecutionException{
      [c.name/]Prepare.loginCredentials(); 
      setPostmanCollectionValues("create");
      setPostmanCollectionValues("edit");

   try {              
            Process process = Runtime.getRuntime().exec(path);
            InputStream inputStream = process.getInputStream();
            BufferedReader bf= new BufferedReader(new InputStreamReader(inputStream));
            String line="";
            String ln;
            while ((ln=bf.readLine()) != null) {
                line=line.concat(ln+"\n");
            }
              System.out.println(line);   
            inputStream.close();
            bf.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } 
    }
}
[/file]
[/template]

[template private genPostmanTestsNonComposite(a : Property, path : String) {
    className   : String    = a.getTestName();
    c           : Class     = a.getOwner();
}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].tests.rest;


[for (cl : Class | c.getHierarchy())]
import [cl.getModel().baseGroup()/].entities.[cl.getEntityName()/];
[/for]
[if (c.getEntityName() <> a.getClass().getEntityName())]
import [c.getModel().baseGroup()/].entities.[a.getClass().getEntityName()/];
[/if]
import [c.getModel().baseGroup()/].dtos.detail.[c.getBasicDTOName()/];
[if (c.getBasicDTOName() <> a.getDTOName())]
import [c.getModel().baseGroup()/].dtos.detail.[a.getDTOName()/];
[/if]
import [c.getModel().baseGroup()/].resources.[c.getJaxRsName()/];
import [c.getModel().baseGroup()/].tests.Utils;
import com.mashape.unirest.http.exceptions.UnirestException;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.util.logging.Logger;
import javax.inject.Inject;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.inject.Inject;
import javax.transaction.UserTransaction;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import org.codehaus.jackson.map.ObjectMapper;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.arquillian.test.api.ArquillianResource;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.maven.Maven;
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/*
 * Testing URI: [c.getFullURI()/]
 */
@RunWith(Arquillian.class)
public class [className/] {

    private static final String BASEPATH = System.getProperty("user.dir");
   String path= BASEPATH.concat("\\collections\\runners\\[c.getURI().concat('CollectionRunner.bat')/]");
   PodamFactory factory = new PodamFactoryImpl();
   JSONParser parser = new JSONParser();
   Gson gson = new Gson();

    private WebTarget target;
    private final String apiPath = Utils.apiPath;
    
    private final static List<[a.getClass().getEntityName()/]> oraculo = new ArrayList<>();

    [for (cl : Class | c.getHierarchy()->reverse())]
    private final String [cl.testPath()/] = "[cl.getURI()/]";
    [/for]
    private final String [a.testPath()/] = "[a.getURI()/]";

    [for (cl : Class | c.getHierarchy()->reverse())]
    private [cl.getEntityName()/] [cl.getFatherEntity()/];
    [/for]

    @ArquillianResource
    private URL deploymentURL;

    @Deployment
    public static WebArchive createDeployment() {
        return ShrinkWrap.create(WebArchive.class)
                // Se agrega las dependencias
                .addAsLibraries(Maven.resolver().loadPomFromFile("pom.xml")
                        .importRuntimeDependencies().resolve()
                        .withTransitivity().asFile())
                // Se agregan los compilados de los paquetes de servicios
                .addPackage([c.getJaxRsName()/].class.getPackage())
                .addPackage("co.edu.uniandes.csw.auth.properties")
                // El archivo que contiene la configuracion a la base de datos.
                .addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                // El archivo beans.xml es necesario para injeccion de dependencias.
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/beans.xml"))
                // El archivo web.xml es necesario para el despliegue de los servlets
                .setWebXML(new File("src/main/webapp/WEB-INF/web.xml"));
    }

    private WebTarget createWebTarget() {
        return ClientBuilder.newClient().target(deploymentURL.toString()).path(apiPath);
    }

    @PersistenceContext(unitName = "[c.getModel().getPUName()/]")
    private EntityManager em;

    @Inject
    private UserTransaction utx;

    private void clearData() {
        [if (a.isRelationshipOwner())]
        List<[c.getEntityName()/]> records = em.createQuery("SELECT u FROM [c.getEntityName()/] u").getResultList();
        for ([c.getEntityName()/] record : records) {
            em.remove(record);
        }
        em.createQuery("delete from [a.getClass().getEntityName()/]").executeUpdate();
        [for (cl : Class | c.getHierarchy()->reject(class | class=c))]
        em.createQuery("delete from [cl.getEntityName()/]").executeUpdate();
        [/for]
        [else]
        List<[a.getClass().getEntityName()/]> records = em.createQuery("SELECT u FROM [a.getClass().getEntityName()/] u").getResultList();
        for ([a.getClass().getEntityName()/] record : records) {
            em.remove(record);
        }
        em.createQuery("delete from [c.getEntityName()/]").executeUpdate();
        [for (cl : Class | c.getHierarchy()->reject(class | class=c))]
        em.createQuery("delete from [cl.getEntityName()/]").executeUpdate();
        [/for]
        [/if]
        oraculo.clear();
    }

   /**
     * Datos iniciales para el correcto funcionamiento de las pruebas.
     *
     * @generated
     */
    private void insertData() {
            [for (cl : Class | c.getHierarchy()->reverse())]
            [cl.getFatherEntity()/] = factory.manufacturePojo([cl.getEntityName()/].class);
            [if (cl.isChild())]
            [cl.getFatherEntity()/].[cl.getParentAttribute().setter()/]([cl.getParentAttribute().getClass().getFatherEntity()/]);
            [/if]
            em.persist([cl.getFatherEntity()/]);
            [/for]

            for (int i = 0; i < 3; i++) {
                [a.getClass().getEntityName()/] [a.name/] = factory.manufacturePojo([a.getClass().getEntityName()/].class);
                em.persist([a.name/]);
                if(i<2){                
                [if (a.isRelationshipOwner())]
                    [c.getFatherEntity()/].[a.getter()/]().add([a.name/]);
                [else]
                [if (a.getOtherEnd().getUpper() = 1)]
                    [a.name/].[a.getOtherEnd().setter()/]([c.getFatherEntity()/]);
                [else]
                    [a.name/].[a.getOtherEnd().getter()/]().add([c.getFatherEntity()/] );
                [/if]
                [/if]
                }
                oraculo.add([a.name/]);
            }
    }

    /**
     * ConfiguraciÃ³n inicial de la prueba.
     *
     * @generated
     */
    @Before
    public void setUpTest() {
        try {
            utx.begin();
            clearData();
            insertData();
            utx.commit();            
        } catch (Exception e) {
            e.printStackTrace();
            try {
                utx.rollback();
            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }
        target = createWebTarget()
        [for (cl : Class | c.getHierarchy()->reverse())]
                .path([cl.testPath()/])
                .path([cl.getFatherEntity()/].getId().toString())
        [/for]
                .path([a.testPath()/]);
    }

   public void setPostmanCollectionValues(String action) throws FileNotFoundException, IOException, ParseException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, UnirestException, JSONException, InterruptedException, ExecutionException{
    
    try(FileWriter wrt = new FileWriter(path)){
        wrt.write("newman run ".concat(BASEPATH.concat("\\collections\\postman_collection[c.name/].json").concat(" -e ").concat(BASEPATH.concat("\\collections\\postman_env.json").concat(" --disable-unicode"))));
    wrt.flush();
    }
     
    Object obj;
       try (FileReader reader = new FileReader([c.name/]Prepare.getPATH())) {
           obj = parser.parse(reader);
       } 
       try (FileWriter writer = new FileWriter([c.name/]Prepare.getPATH())) {
           [c.getBasicDTOName()/] [c.name/] = factory.manufacturePojo([c.getBasicDTOName()/].class);
           JsonArray jsonArray=gson.toJsonTree(obj).getAsJsonObject().get("item").getAsJsonArray();
           Integer index= [c.name/]Prepare.findJsonIndex(jsonArray,action);
           JsonElement jsonElement=gson.toJsonTree(obj);
           [c.name/]Prepare.setCollectionBody(jsonElement, index, [c.name/], gson);
           writer.write(jsonElement.toString());
           writer.flush();
       }
}


    @Test 
    public void postman() throws FileNotFoundException, IOException, ParseException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, UnirestException, JSONException, InterruptedException, ExecutionException{
      [c.name/]Prepare.loginCredentials(); 
      setPostmanCollectionValues("create");
      setPostmanCollectionValues("edit");

   try {              
            Process process = Runtime.getRuntime().exec(path);
            InputStream inputStream = process.getInputStream();
            BufferedReader bf= new BufferedReader(new InputStreamReader(inputStream));
            String line="";
            String ln;
            while ((ln=bf.readLine()) != null) {
                line=line.concat(ln+"\n");
            }
              System.out.println(line);   
            inputStream.close();
            bf.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } 
    }
}
[/file]
[/template]
[template protected genCollectionPrepare(c: Class, path:String)]
[file (path.concat(c.name+'Prepare.java'),false,'UTF-8')]
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package [c.getModel().baseGroup()/].tests.postman.collections;

import [c.getModel().baseGroup()/].dtos.detail.[c.getBasicDTOName()/];
import co.edu.uniandes.csw.auth.conexions.AuthenticationApi;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.lang.Class;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ExecutionException;
import org.json.JSONException;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
/**
 *
 * @author Asistente
 */
public class [c.name/]Prepare  {
    
   private static final String PATH = System.getProperty("user.dir").concat("\\collections\\postman_collection[c.name/].json");
   private static final String PATHENV = System.getProperty("user.dir").concat("\\collections\\postman_env.json");

 public static Integer findJsonIndex(JsonArray jarray,String action){
     Iterator<JsonElement> it=jarray.iterator();
     int count =0;
    while(it.hasNext()){
       if(it.next().getAsJsonObject().get("name").getAsString().contains(action))
          break;
       count++;
           }
    return count;
 }
public static void setCollectionBody(JsonElement jsonElement,Integer index,[c.getBasicDTOName()/] [c.getURI()/],Gson gson) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException{

String val=getFields([c.getURI()/]);
 
jsonElement.getAsJsonObject().get("item")
      .getAsJsonArray().get(index)
      .getAsJsonObject().get("request")
      .getAsJsonObject().get("body")
      .getAsJsonObject().addProperty("raw", val);
}
    /**
     * @return the PATH
     */
    public static String getPATH() {
        return PATH;
    }
    public static String getFields([c.getBasicDTOName()/] [c.getURI()/]) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException{
        String open="{\"";
        String content="";
        String close="}";
  
    } 

    /**
     * @return the PATHENV
     */
    public static String getPATHENV() {
        return PATHENV;
    }
    public static void loginCredentials() throws FileNotFoundException, IOException, ParseException, UnirestException, JSONException, InterruptedException, ExecutionException{

        AuthenticationApi api = new AuthenticationApi();
   JSONParser parser = new JSONParser();
   Gson gson = new Gson();
   Object obj;
       try (FileReader fr = new FileReader(PATHENV)) {
           obj = parser.parse(fr);
            fr.close();
       }
        JsonElement je = gson.toJsonTree(obj);
        je.getAsJsonObject()
                .get("values").getAsJsonArray()
                .get(0).getAsJsonObject().addProperty("value", api.getProp().getProperty("username"));
        je.getAsJsonObject()
                .get("values").getAsJsonArray()
                .get(1).getAsJsonObject().addProperty("value", api.getProp().getProperty("password"));
                
       FileWriter fw = new FileWriter(PATHENV);
       fw.write(je.toString());
       fw.flush();
       fw.close();

    }
   
}

[/file]
[/template]



[template private getTestName(c : Class)]
[c.name/]IT
[/template]

[template private getTestName(a : Property)]
[a.getOwner().name/][a.name.toUpperFirst()/]IT
[/template]

[template private getFatherEntity(c : Class)]
father[c.name/]Entity
[/template]

[template private testPath(a : Property)]
[a.name.toLowerFirst()/]Path
[/template]

[template private testPath(c : Class)]
[c.getName()/]Path
[/template]

[template private getTestSuffix(a : Property)]
[a.name.toUpperFirst()/]IT
[/template]

[template private getResponseVarName(a : Property)]
[a.name.toLower()/]IT
[/template]

[template private getDTOName(a : Property)]
[a.getClass().getBasicDTOName()/]
[/template]

[template private testName(c : Class)]
[c.name.toLower().concat('IT')/]
[/template]