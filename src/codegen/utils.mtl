[comment encoding = UTF-8 /]
[module utils('http://www.eclipse.org/uml2/5.0.0/UML')]

[query public getClasses(m : Model) : OrderedSet(Class) =
m.packagedElement->filter(Class)->sortedBy(c | c.name)
/]

[query public getAllAttribs(c : Class) : OrderedSet(Property) = 
c.allAttributes()->reject(isID())
/]

[query public getId(c : Class) : Property =
c.allAttributes()->select(isID())->first()
/]

[query public getRootClasses(m : Model) : OrderedSet(Class) = 
m.getClasses()->reject(isChild())
/]

[query public isMany2Many(asc : Association) : Boolean = 
asc.getAllAttributes()->exists(
    a | a.isNavigable()
    and a.getUpper() <> 1 
    and a.aggregation = AggregationKind::none
    and a.getOtherEnd().getUpper() <> 1
    and a.getOtherEnd().aggregation = AggregationKind::none
)
/]

[query public isOne2One(asc : Association) : Boolean = 
asc.getAllAttributes()->exists(
    a | a.isNavigable()
    and a.getUpper() = 1
    and a.aggregation = AggregationKind::none
    and a.getOtherEnd().getUpper() = 1
    and a.getOtherEnd().aggregation = AggregationKind::none
)
/]

[query public isOne2Many(asc : Association) : Boolean = 
asc.getAllAttributes()->exists(
    a | a.isNavigable()
    and a.getUpper() <> 1 
    and a.getOtherEnd().getUpper() = 1
)
/]

[query public isMany2One(asc : Association) : Boolean = 
asc.getAllAttributes()->exists(
    a | a.isNavigable()
    and a.getUpper() = 1 
    and a.getOtherEnd().getUpper() <> 1
)
/]

[query public isComposite(asc : Association) : Boolean = 
asc.getAllAttributes()->exists(
    a | a.isComposite()
    or  a.getOtherEnd().isComposite()
)
/]

[query public getAttributesWithRef(c : Class) : OrderedSet(Property) = 
c.allAttributes()->union(c.getReferences(false))->asOrderedSet()
/]

[query public getReferences(c : Class, includeParent : Boolean) : OrderedSet(Property) = 
c.getAssociations()->collect(
    getAllAttributes()->select(
        a | a.isNavigable()
        and a.getUpper() = 1
        and a.getOtherEnd().type = c
        and (a.getOtherEnd().isComposite() implies includeParent)
    )
)->asOrderedSet()
/]

[query public hasReferences(c : Class, includeParent : Boolean) : Boolean =
c.getReferences(includeParent)->notEmpty()
/]

[query public getCollectionAttributes(c : Class) : Set(Property) = 
c.getAssociations()->collect(
    getAllAttributes()->select(
        a | a.isNavigable()
        and a.getUpper() <> 1
        and a.getUpper() <> 0
        and a.getOtherEnd().type = c
        and (a.aggregation <> AggregationKind::none implies a.getOtherEnd().getUpper() = 1)
    )
)->asSet()
/]

[query public getCompositeCollectionAttributes(c : Class) : Set(Property) =
c.getCollectionAttributes()->select(isComposite())
/]

[query public getNonCompositeCollectionAttributes(c : Class) : Set(Property) =
c.getCollectionAttributes()->select(not isComposite())
/]

[query public hasCompositeAssociations(c : Class) : Boolean =
c.getCompositeCollectionAttributes()->notEmpty()
/]

[query public hasSharedAssociations(c : Class) : Boolean =
c.getNonCompositeCollectionAttributes()->notEmpty()
/]

[query public hasManyToManyAssociations(c : Class) : Boolean =
c.getCollectionAttributes()->exists(a|a.association.isMany2Many())
/]

[query public isMaster(c : Class) : Boolean =
c.getCollectionAttributes()->notEmpty()
/]

[query public isChild(c : Class) : Boolean = 
c.getAssociations()->collect(
    getAllAttributes()->select(
        a | a.getOtherEnd().isNavigable()
        and a.getOtherEnd().getUpper() < 0
        and a.getOtherEnd().type = c
        and a.getOtherEnd().isComposite()
))->flatten()->notEmpty()
 /]

[query public getParentAttribute(c : Class) : Property = 
c.getAssociations()->collect(
    getAllAttributes()->select(
        a | a.isNavigable()
        and a.getUpper() = 1
        and a.getOtherEnd().type = c
        and a.getOtherEnd().isComposite()
))->flatten()->asOrderedSet()->first() 
 /]

[query public isValidType(a : Property) : Boolean = 
Set{'String','Boolean', 'Date', 'Long', 'Integer', 'Image'}->exists(t | a.type <> null and t = a.type.name)
/]

[query public hasDateAttribute(c : Class) : Boolean = c.allAttributes()->exists(a|a.isDate()) /]

[query public isDate(a : Property) : Boolean = a.type.name = 'Date' /]

[query public isComputed(a : Property) : Boolean = a.type.name = 'Computed' /]

[query public isID(a : Property) : Boolean = a.name = 'id' /]

[query public isName(a : Property) : Boolean = a.name = 'name' /]

[query public getter(a : Property) : String = 'get'.concat(a.name.toUpperFirst()) /]

[query public setter(a : Property) : String = 'set'.concat(a.name.toUpperFirst()) /]

[query public getClass(a : Property) : Class = Class.allInstances()->select(c | c.name = a.type.name)->asOrderedSet()->first() /]

[query public getDisplayName(a : Property) : String = a.name.toUpperFirst() /]

[query public isRequired(a : Property) : Boolean = self.getLower() > 0 /]

[query public isRelationshipOwner(a : Property) : Boolean = 
    a.isNavigable()
and (
    not a.getOtherEnd().isNavigable()
    or  (
        (a.getUpper() = 1 and a.getOtherEnd().getUpper() <> 1)
        or  a.name > a.getOtherEnd().name
    )
)
/]

[template public testName(c : Class)]
[c.name.toLower().concat('Test')/]
[/template]

[template public specName(c : Class)]
[c.name.toLower()/]
[/template]

[template public testURI(c : Class)]
[c.name.toLower().concat('Path')/]
[/template]

[template public testPath(c : Class)]
[c.name.toLower().concat('Path')/]
[/template]

[template public getServiceName(c : Class)]
[c.name.toUpperFirst().concat('Service')/]
[/template]

[template public getServiceTestName(c : Class)]
[c.name.concat('Test')/]
[/template]

[template public getJavaType(a : Property)]
[if (a.type.name = 'Image')]
String[else]
[a.type.name/][/if]
[/template]

[template public getModelName(c : Class)]
[c.getModel().name/]
[/template]

[template public getCtrl(c : Class)]
[c.getName().concat('Ctrl')/]
[/template]

[template public getService(c : Class)]
[c.getName().concat('Service')/]
[/template]

[template public getEntityModel(c : Class)]
[c.getName().concat('Model')/]
[/template]

[template public getModule(c : Class)]
[c.getName().concat('Module')/]
[/template]

[template public getMasterModule(c : Class)]
[c.getName().concat('Module')/]
[/template]

[template public getMasterService(c : Class)]
[c.getName().concat('Service')/]
[/template]

[template public getMasterContext(c : Class)]
[c.getName().concat('Context')/]
[/template]

[template public getMasterController(c : Class)]
[c.getName().concat('Ctrl')/]
[/template]

[template public getContext(c : Class)]
[c.getName().concat('Context')/]
[/template]

[template public getURI(c : Class)]
[c.getName().concat('s')/]
[/template]

[template public getMasterURI(c : Class)]
[c.getName().concat('s').concat('/master')/]
[/template]

[template public getName(c : Class)]
[c.name.toLowerFirst()/]
[/template]

[template public getDisplayName(c : Class)]
[c.name/]
[/template]

[template public getDTOName(c : Class)]
[c.name.toUpperFirst().concat('DTO')/]
[/template]

[template public getJaxRsName(c : Class)]
[c.name.concat('Service')/]
[/template]

[template public getMasterJaxRsName(c : Class)]
[c.name.concat('MasterService')/]
[/template]

[template public getAPIName(c : Class)]
['I'.concat(c.name).concat('Logic')/]
[/template]

[template public getBeanName(c : Class)]
[c.name.concat('Logic')/]
[/template]

[template public getBeanLower(c : Class)]
[c.name.toLowerFirst().concat('Logic')/]
[/template]

[template public getEntityName(c : Class)]
[c.name.concat('Entity')/]
[/template]

[template public getEntityId(c : Class)]
[c.name.toLowerFirst().concat('Id')/]
[/template]

[template public getPersistenceName(c : Class)]
[c.name.concat('Persistence')/]
[/template]

[template public getConverterName(c : Class)]
[c.name.concat('Converter')/]
[/template]

[template public getTestName(c : Class)]
[c.name.concat('LogicTest')/]
[/template]

[template public getPersistenceTestName(c : Class)]
[c.name.concat('PersistenceTest')/]
[/template]

[template public baseGroup(m : Model)]
['co.edu.uniandes.csw.'.concat(m.name.toLowerCase())/]
[/template]

[template public basePath(m : Model)]
['/src/main/java/'.concat(m.baseGroup().replaceAll('[.]', '/')).concat('/')/]
[/template]

[template public baseTestPath(m : Model)]
['/src/test/java/'.concat(m.baseGroup().replaceAll('[.]', '/')).concat('/')/]
[/template]

[template public basePck(c : Class, suffix : String)]
[c.getModel().baseGroup().concat('.'+c.name.toLowerFirst()).concat(suffix)/]
[/template]

[template public getBackendProjectName(m : Model)]
[m.name.concat('.logic')/]
[/template]

[template public getApiProjectName(m : Model)]
[m.name.concat('.api')/]
[/template]

[template public getWebProjectName(m : Model)]
[m.name.concat('.web')/]
[/template]

[template private asArtifactId(s : String)]
[s.replace('^\\W+','').replaceAll('(?!^)([A-Z])','-$1').replaceAll('\\W+', '-').toLowerCase()/]
[/template]

[template public getArtifactId(m : Model)]
[m.name.asArtifactId()/]
[/template]

[template public getLogicArtifactId(m : Model)]
[m.getBackendProjectName().asArtifactId()/]
[/template]

[template public getApiArtifactId(m : Model)]
[m.getApiProjectName().asArtifactId()/]
[/template]

[template public getWebArtifactId(m : Model)]
[m.getWebProjectName().asArtifactId()/]
[/template]

[template public getWebRoot(m : Model)]
[m.getWebArtifactId().concat('/app/')/]
[/template]

[template public getPoolName(m : Model)]
[m.name.concat('_pool')/]
[/template]

[template public getJNDIName(m : Model)]
['java:app/jdbc/'.concat(m.name)/]
[/template]

[template public getPUName(m : Model)]
[m.name.concat('PU')/]
[/template]

[template public getMetaInfPath(m : Model)]
[m.getLogicArtifactId().concat('/src/main/resources/META-INF/')/]
[/template]

[template public getTestMetaInfPath(m : Model)]
[m.getLogicArtifactId().concat('/src/test/resources/META-INF/')/]
[/template]

[template public getTestServicesMetaInfPath(m : Model)]
[m.getApiArtifactId().concat('/src/test/resources/META-INF/')/]
[/template]

[template public getWebInfPath(m : Model)]
[m.getApiArtifactId().concat('/src/main/webapp/WEB-INF/')/]
[/template]

[template public getProjectVersion(m : Model)]
0.1.0-SNAPSHOT
[/template]

[template public genBeansXml(m : Model, path : String)]
[file(path.concat('beans.xml'), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
</beans>
[/file]
[/template]
